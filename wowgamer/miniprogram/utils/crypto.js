"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CryptoJS = require("crypto-js");
const defaultKey = "23d$%Z#werz^cew@@$#@";
const defaultIv = "olNGRWos02o01920xx#";
function encrypt(str, key, iv) {
    const keyStr = key ? encParse(key) : encParse(defaultKey);
    const ivStr = iv ? encParse(iv) : encParse(defaultIv);
    const encryptedStr = CryptoJS.AES.encrypt(str, keyStr, {
        iv: ivStr,
        mode: CryptoJS.mode.CFB,
        padding: CryptoJS.pad.Pkcs7
    });
    return encryptedStr.toString();
}
function decrypt(str, key, iv) {
    const keyStr = key ? encParse(key) : encParse(defaultKey);
    const ivStr = iv ? encParse(iv) : encParse(defaultIv);
    const flag = isBase64(str);
    if (!flag) {
        str = CryptoJS.enc.Hex.parse(str);
        str = CryptoJS.enc.Base64.stringify(str);
    }
    const encryptedStr = CryptoJS.AES.decrypt(str, keyStr, {
        iv: ivStr,
        mode: CryptoJS.mode.CFB,
        padding: CryptoJS.pad.Pkcs7
    });
    return encryptedStr.toString(CryptoJS.enc.Utf8);
}
function encParse(key) {
    return CryptoJS.enc.Latin1.parse(key);
}
function md5(str, times = 1) {
    for (let i = 0; i < times; i++) {
        str = CryptoJS.MD5(str).toString();
    }
    return str;
}
function isBase64(str) {
    let reg = /^(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=))|(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{2}==))$/;
    return reg.test(str);
}
exports.default = {
    decrypt,
    encrypt,
    md5
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J5cHRvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3J5cHRvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBQ3JDLE1BQU0sVUFBVSxHQUFHLHNCQUFzQixDQUFDO0FBQzFDLE1BQU0sU0FBUyxHQUFHLHFCQUFxQixDQUFDO0FBUXhDLFNBQVMsT0FBTyxDQUFDLEdBQVcsRUFBRSxHQUFZLEVBQUUsRUFBVztJQUNyRCxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzFELE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFdEQsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRTtRQUNyRCxFQUFFLEVBQUUsS0FBSztRQUNULElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUc7UUFDdkIsT0FBTyxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSztLQUM1QixDQUFDLENBQUM7SUFJSCxPQUFPLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNqQyxDQUFDO0FBT0QsU0FBUyxPQUFPLENBQUMsR0FBVyxFQUFFLEdBQVksRUFBRSxFQUFXO0lBQ3JELE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDMUQsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUd0RCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0IsSUFBSSxDQUFDLElBQUksRUFBRTtRQUVULEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbEMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUMxQztJQUVELE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUU7UUFDckQsRUFBRSxFQUFFLEtBQUs7UUFDVCxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHO1FBQ3ZCLE9BQU8sRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUs7S0FDNUIsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUtELFNBQVMsUUFBUSxDQUFDLEdBQVc7SUFFM0IsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQU1ELFNBQVMsR0FBRyxDQUFDLEdBQVcsRUFBRSxLQUFLLEdBQUcsQ0FBQztJQUNqQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzlCLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ3BDO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBSUQsU0FBUyxRQUFRLENBQUMsR0FBVztJQUMzQixJQUFJLEdBQUcsR0FBRyxzRkFBc0YsQ0FBQztJQUNqRyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkIsQ0FBQztBQUVELGtCQUFlO0lBQ2IsT0FBTztJQUNQLE9BQU87SUFDUCxHQUFHO0NBQ0osQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENyeXB0b0pTID0gcmVxdWlyZShcImNyeXB0by1qc1wiKVxyXG5jb25zdCBkZWZhdWx0S2V5ID0gXCIyM2QkJVojd2Vyel5jZXdAQCQjQFwiOyAvLyDpu5jorqTnmoRrZXlcclxuY29uc3QgZGVmYXVsdEl2ID0gXCJvbE5HUldvczAybzAxOTIweHgjXCI7IC8vIOm7mOiupOeahGtleSDlgY/np7vph49cclxuXHJcbi8qKlxyXG4gKiDliqDlr4bmlrnms5VcclxuICogQHBhcmFtOiBzdHIg6ZyA6KaB5Yqg5a+G55qE5a2X56ymXHJcbiAqIEBwYXJhbToga2V5IOWvhumSpVxyXG4gKiBAcGFyYW06IGl2IOWvhumSpeWBj+enu+mHj1xyXG4gKi9cclxuZnVuY3Rpb24gZW5jcnlwdChzdHI6IHN0cmluZywga2V5Pzogc3RyaW5nLCBpdj86IHN0cmluZykge1xyXG4gIGNvbnN0IGtleVN0ciA9IGtleSA/IGVuY1BhcnNlKGtleSkgOiBlbmNQYXJzZShkZWZhdWx0S2V5KTtcclxuICBjb25zdCBpdlN0ciA9IGl2ID8gZW5jUGFyc2UoaXYpIDogZW5jUGFyc2UoZGVmYXVsdEl2KTtcclxuXHJcbiAgY29uc3QgZW5jcnlwdGVkU3RyID0gQ3J5cHRvSlMuQUVTLmVuY3J5cHQoc3RyLCBrZXlTdHIsIHtcclxuICAgIGl2OiBpdlN0cixcclxuICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuQ0ZCLFxyXG4gICAgcGFkZGluZzogQ3J5cHRvSlMucGFkLlBrY3M3XHJcbiAgfSk7XHJcblxyXG4gIC8vIOebtOaOpXRvU3RyaW5nKCnmmK9iYXNlNjTmoLzlvI/nmoTlrZfnrKbkuLJcclxuICAvLyBjaXBoZXJ0ZXh0LnRvU3RyaW5nKCkg5pivMTI45L2N55qE5a2X56ym5LiyXHJcbiAgcmV0dXJuIGVuY3J5cHRlZFN0ci50b1N0cmluZygpO1xyXG59XHJcbi8qKlxyXG4gKiDop6Plr4bmlrnms5VcclxuICogQHBhcmFtOiBzdHIg6ZyA6KaB6Kej5a+G55qE5a2X56ymXHJcbiAqIEBwYXJhbToga2V5IOWvhumSpVxyXG4gKiBAcGFyYW06IGl2IOWvhumSpeWBj+enu+mHj1xyXG4gKi9cclxuZnVuY3Rpb24gZGVjcnlwdChzdHI6IHN0cmluZywga2V5Pzogc3RyaW5nLCBpdj86IHN0cmluZykge1xyXG4gIGNvbnN0IGtleVN0ciA9IGtleSA/IGVuY1BhcnNlKGtleSkgOiBlbmNQYXJzZShkZWZhdWx0S2V5KTtcclxuICBjb25zdCBpdlN0ciA9IGl2ID8gZW5jUGFyc2UoaXYpIDogZW5jUGFyc2UoZGVmYXVsdEl2KTtcclxuXHJcbiAgLy8g5Yik5patc3Ry5piv5ZCm5Li6YmFzZTY0LOWmguaenOS4jeaYr+Wwseimgei9rGJhc2U2NO+8jOaYr+S6huWwseS4jeiDveWGjei9rFxyXG4gIGNvbnN0IGZsYWcgPSBpc0Jhc2U2NChzdHIpO1xyXG4gIGlmICghZmxhZykge1xyXG4gICAgLy8g6L2s5Li6YmFzZTY05LmL5YmN6KaB5YWI6L2sMTbov5vliLZcclxuICAgIHN0ciA9IENyeXB0b0pTLmVuYy5IZXgucGFyc2Uoc3RyKTtcclxuICAgIC8vIOWPquaciWJhc2U2NOagvOW8j+eahOWtl+espuaJjeiDveiiq+ino+WvhlxyXG4gICAgc3RyID0gQ3J5cHRvSlMuZW5jLkJhc2U2NC5zdHJpbmdpZnkoc3RyKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGVuY3J5cHRlZFN0ciA9IENyeXB0b0pTLkFFUy5kZWNyeXB0KHN0ciwga2V5U3RyLCB7XHJcbiAgICBpdjogaXZTdHIsXHJcbiAgICBtb2RlOiBDcnlwdG9KUy5tb2RlLkNGQixcclxuICAgIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5Qa2NzN1xyXG4gIH0pO1xyXG4gIHJldHVybiBlbmNyeXB0ZWRTdHIudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLlV0ZjgpO1xyXG59XHJcbi8qKlxyXG4gKiDlpITnkIblr4bpkqXlrZfnrKbmoLzlvI9cclxuICogQHBhcmFtOiBrZXkg6ZyA6KaB6L2s5qC85byP55qE5a2X56ymXHJcbiAqL1xyXG5mdW5jdGlvbiBlbmNQYXJzZShrZXk6IHN0cmluZykge1xyXG4gIC8vIGtleSA9IENyeXB0b0pzLmVuYy5VdGY4LnBhcnNlKGtleSk7XHJcbiAgcmV0dXJuIENyeXB0b0pTLmVuYy5MYXRpbjEucGFyc2Uoa2V5KTtcclxufVxyXG4vKipcclxuICog5L2/55SoTUQ1IGhhc2jlrZfnrKbkuLJcclxuICogQHBhcmFtOiBzdHIg6ZyA6KaB5Yqg5a+G55qE5a2X56ym5LiyXHJcbiAqIEBwYXJhbTogdGltZXMg6ZyA6KaBaGFzaOeahOasoeaVsFxyXG4gKi9cclxuZnVuY3Rpb24gbWQ1KHN0cjogc3RyaW5nLCB0aW1lcyA9IDEpIHtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRpbWVzOyBpKyspIHtcclxuICAgIHN0ciA9IENyeXB0b0pTLk1ENShzdHIpLnRvU3RyaW5nKCk7XHJcbiAgfVxyXG4gIHJldHVybiBzdHI7XHJcbn1cclxuLyoqXHJcbiAqIOWIpOaWreaYr+WQpuaYr0Jhc2U2NOagvOW8j+eahOWtl+espuS4slxyXG4gKi9cclxuZnVuY3Rpb24gaXNCYXNlNjQoc3RyOiBzdHJpbmcpIHtcclxuICBsZXQgcmVnID0gL14oKFtBLVphLXowLTkrL117NH0pKihbQS1aYS16MC05Ky9dezN9PSkpfCgoW0EtWmEtejAtOSsvXXs0fSkqKFtBLVphLXowLTkrL117Mn09PSkpJC87XHJcbiAgcmV0dXJuIHJlZy50ZXN0KHN0cik7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBkZWNyeXB0LFxyXG4gIGVuY3J5cHQsXHJcbiAgbWQ1XHJcbn1cclxuIl19