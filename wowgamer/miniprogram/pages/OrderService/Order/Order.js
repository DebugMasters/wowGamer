"use strict";
const app = getApp();
Component({
    options: {
        addGlobalClass: true,
    },
    data: {
        userId: '',
        catalogType: '1',
        displayType: 1,
        index: 0,
        level1Content: new Array(),
        level1Index: 0,
        level1Money: 0,
        level2Content: new Array(),
        level2DisplayName: '',
        level2Currentlevel: NaN,
        level2Targetlevel: NaN,
        level2Index: 0,
        level2Money: 0,
        level3Content: new Array(),
        level3DisplayName: '',
        level3Index: 0,
        level3Money: 0,
        charactersContent: new Array(),
        charactersIndex: 0,
        totalMoney: 0,
        allianceHordeMap: new Map(),
        characterClassMap: new Map(),
    },
    behaviors: [],
    lifetimes: {
        ready() {
        }
    },
    methods: {
        initData() {
            this.setData({
                userId: wx.getStorageSync('userId'),
                allianceHordeMap: new Map([[1, '联盟'], [2, '部落']]),
                characterClassMap: new Map([[1, '圣骑士'], [2, '战士'], [3, '死亡骑士'], [4, '猎人'], [5, '萨满祭司'], [6, '潜行者'], [7, '德鲁伊'], [8, '恶魔猎手'], [9, '法师'], [10, '牧师'], [11, '术士']])
            });
            this.getLevel1();
            this.getCharacters();
        },
        getLevel1() {
            app.requestFuncPromise('/system/getCatalogList', { parentId: '0', catalogType: parseInt(this.data.catalogType) }, 'GET')
                .then(res => {
                console.log(res);
                let data = {
                    level1Content: new Array(),
                    level1Money: res.data.catalogList[0].money
                };
                res.data.catalogList.forEach(x => {
                    data.level1Content.push({ id: x.id, name: x.catalogName, money: x.money });
                });
                this.setData(data);
                this.getLevel2(res.data.catalogList[0].id);
            })
                .catch(res => {
                console.log(res);
            });
        },
        level1Change(e) {
            this.setData({
                level1Index: parseInt(e.detail.value),
                level1Money: this.data.level1Content[parseInt(e.detail.value)].money
            });
            this.getLevel2(this.data.level1Content[this.data.level1Index].id);
        },
        getLevel2(parentId) {
            app.requestFuncPromise('/system/getCatalogList', { parentId: parentId, catalogType: parseInt(this.data.catalogType) }, 'GET')
                .then(res => {
                console.log(res);
                this.setData({
                    displayType: res.data.catalogList[0].catalogDisplayType,
                    level2DisplayName: res.data.catalogList[0].catalogDisplayName,
                    level2Money: res.data.catalogList[0].money
                });
                if (this.data.displayType == 1) {
                    let data = {
                        level2Content: new Array(),
                    };
                    res.data.catalogList.forEach(x => {
                        data.level2Content.push({ id: x.id, name: x.catalogName, money: x.money });
                    });
                    this.setData(data);
                }
                if (this.data.displayType == 2) {
                    let temp = res.data.catalogList[0].catalogName.split('-');
                    let data = {
                        level2Currentlevel: parseInt(temp[0]),
                        level2Targetlevel: parseInt(temp[1])
                    };
                    this.setData(data);
                }
                this.calcTotalMoney();
                this.getLevel3(res.data.catalogList[0].id);
            })
                .catch(res => {
                console.log(res);
            });
        },
        level2Change(e) {
            this.setData({
                level2Index: parseInt(e.detail.value),
                level2Money: this.data.level2Content[parseInt(e.detail.value)].money
            });
            this.getLevel3(this.data.level2Content[this.data.level2Index].id);
        },
        getLevel3(parentId) {
            app.requestFuncPromise('/system/getCatalogList', { parentId: parentId, catalogType: parseInt(this.data.catalogType) }, 'GET')
                .then(res => {
                console.log(res);
                let data = {
                    level3Content: new Array(),
                    level3DisplayName: res.data.catalogList[0].catalogDisplayName,
                    level3Money: res.data.catalogList[0].money
                };
                res.data.catalogList.forEach(x => {
                    data.level3Content.push({ id: x.id, name: x.catalogName, money: x.money });
                });
                this.setData(data);
                this.calcTotalMoney();
            })
                .catch(res => {
                console.log(res);
            });
        },
        level3Change(e) {
            this.setData({
                level3Index: parseInt(e.detail.value),
                level3Money: this.data.level3Content[parseInt(e.detail.value)].money
            });
        },
        level2CurrentLevelBlur() {
            this.calcTotalMoney();
        },
        level2TargetLevelBlur() {
            this.calcTotalMoney();
        },
        level2CurrentLevelInput(e) {
            this.setData({
                level2Currentlevel: parseInt(e.detail.value)
            });
        },
        level2TargetLevelInput(e) {
            this.setData({
                level2Targetlevel: parseInt(e.detail.value)
            });
        },
        calcTotalMoney() {
            if (this.data.displayType == 1) {
                this.setData({
                    totalMoney: this.data.level1Money + this.data.level2Money + this.data.level3Money
                });
            }
            if (this.data.displayType == 2) {
                this.setData({
                    totalMoney: this.data.level1Money + (this.data.level2Targetlevel - this.data.level2Currentlevel) * this.data.level2Money + this.data.level3Money
                });
            }
        },
        getCharacters() {
            const _this = this;
            app.requestFunc('/user/getCharacterList', { userId: this.data.userId, realmType: this.data.catalogType }, 'GET', res => {
                console.log(res.data);
                if (res.data.success == true) {
                    let data = {
                        charactersContent: new Array()
                    };
                    res.data.list.forEach(x => {
                        data.charactersContent.push({ id: x.characterId, name: x.characterName + '(' + x.accountName + ')' + '/' + _this.data.allianceHordeMap.get(x.allianceHorde) + '/' + _this.data.characterClassMap.get(x.characterClass) });
                    });
                    this.setData(data);
                }
            });
        },
        charactersChange(e) {
            this.setData({
                charactersIndex: parseInt(e.detail.value)
            });
        },
        changeCatalogType(e) {
            this.setData({
                catalogType: e.currentTarget.dataset.type,
                level1Index: 0
            });
            this.getLevel1();
            this.getCharacters();
        },
        NavToCreateOrder() {
            let transdata = {
                characterName: this.data.charactersContent[this.data.charactersIndex].name,
                orderCatalog: '',
                orderCatalog1: this.data.level1Content[this.data.level1Index].id,
                orderCatalog2: this.data.level2Content[this.data.level2Index].id,
                orderCatalog3: this.data.level3Content[this.data.level3Index].id,
                money: this.data.totalMoney,
                characterId: this.data.charactersContent[this.data.charactersIndex].id
            };
            if (this.data.displayType == 1) {
                transdata.orderCatalog = this.data.level1Content[this.data.level1Index].name + '/' + this.data.level2Content[this.data.level2Index].name + '/' + this.data.level3Content[this.data.level3Index].name;
            }
            if (this.data.displayType == 2) {
                transdata.orderCatalog = this.data.level1Content[this.data.level1Index].name + '/' + this.data.level2Currentlevel + '-' + this.data.level2Targetlevel + '/' + this.data.level3Content[this.data.level3Index].name;
            }
            const comData = JSON.stringify(transdata);
            wx.navigateTo({
                url: '../../OrderService/OrderEntry/OrderEntry' + '?data=' + comData,
                success: function (res) { },
                fail: function () { },
                complete: function () { }
            });
        },
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3JkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJPcmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxFQUFjLENBQUE7QUFFaEMsU0FBUyxDQUFDO0lBQ1IsT0FBTyxFQUFFO1FBQ1AsY0FBYyxFQUFFLElBQUk7S0FDckI7SUFDRCxJQUFJLEVBQUU7UUFDSixNQUFNLEVBQUUsRUFBRTtRQUNWLFdBQVcsRUFBRSxHQUFHO1FBQ2hCLFdBQVcsRUFBRSxDQUFDO1FBRWQsS0FBSyxFQUFFLENBQUM7UUFDUixhQUFhLEVBQUUsSUFBSSxLQUFLLEVBQTZDO1FBQ3JFLFdBQVcsRUFBRSxDQUFDO1FBQ2QsV0FBVyxFQUFFLENBQUM7UUFDZCxhQUFhLEVBQUUsSUFBSSxLQUFLLEVBQTZDO1FBQ3JFLGlCQUFpQixFQUFFLEVBQUU7UUFDckIsa0JBQWtCLEVBQUUsR0FBRztRQUN2QixpQkFBaUIsRUFBRSxHQUFHO1FBQ3RCLFdBQVcsRUFBRSxDQUFDO1FBQ2QsV0FBVyxFQUFFLENBQUM7UUFDZCxhQUFhLEVBQUUsSUFBSSxLQUFLLEVBQTZDO1FBQ3JFLGlCQUFpQixFQUFFLEVBQUU7UUFDckIsV0FBVyxFQUFFLENBQUM7UUFDZCxXQUFXLEVBQUUsQ0FBQztRQUNkLGlCQUFpQixFQUFFLElBQUksS0FBSyxFQUE4QjtRQUMxRCxlQUFlLEVBQUUsQ0FBQztRQUNsQixVQUFVLEVBQUUsQ0FBQztRQUNiLGdCQUFnQixFQUFFLElBQUksR0FBRyxFQUFFO1FBQzNCLGlCQUFpQixFQUFFLElBQUksR0FBRyxFQUFFO0tBRTdCO0lBRUQsU0FBUyxFQUFFLEVBQUU7SUFHYixTQUFTLEVBQUU7UUFDVCxLQUFLO1FBQ0wsQ0FBQztLQUNGO0lBRUQsT0FBTyxFQUFFO1FBQ1AsUUFBUTtZQUNOLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1gsTUFBTSxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO2dCQUNuQyxn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dCBhcHAgPSBnZXRBcHA8SUFwcE9wdGlvbj4oKVxuXG5Db21wb25lbnQoe1xuICBvcHRpb25zOiB7XG4gICAgYWRkR2xvYmFsQ2xhc3M6IHRydWUsXG4gIH0sXG4gIGRhdGE6IHtcbiAgICB1c2VySWQ6ICcnLFxuICAgIGNhdGFsb2dUeXBlOiAnMScsXG4gICAgZGlzcGxheVR5cGU6IDEsXG5cbiAgICBpbmRleDogMCxcbiAgICBsZXZlbDFDb250ZW50OiBuZXcgQXJyYXk8e2lkOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgbW9uZXk6IG51bWJlcn0+KCksXG4gICAgbGV2ZWwxSW5kZXg6IDAsXG4gICAgbGV2ZWwxTW9uZXk6IDAsXG4gICAgbGV2ZWwyQ29udGVudDogbmV3IEFycmF5PHtpZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIG1vbmV5OiBudW1iZXJ9PigpLFxuICAgIGxldmVsMkRpc3BsYXlOYW1lOiAnJyxcbiAgICBsZXZlbDJDdXJyZW50bGV2ZWw6IE5hTixcbiAgICBsZXZlbDJUYXJnZXRsZXZlbDogTmFOLFxuICAgIGxldmVsMkluZGV4OiAwLFxuICAgIGxldmVsMk1vbmV5OiAwLFxuICAgIGxldmVsM0NvbnRlbnQ6IG5ldyBBcnJheTx7aWQ6IHN0cmluZywgbmFtZTogc3RyaW5nLCBtb25leTogbnVtYmVyfT4oKSxcbiAgICBsZXZlbDNEaXNwbGF5TmFtZTogJycsXG4gICAgbGV2ZWwzSW5kZXg6IDAsXG4gICAgbGV2ZWwzTW9uZXk6IDAsXG4gICAgY2hhcmFjdGVyc0NvbnRlbnQ6IG5ldyBBcnJheTx7aWQ6IHN0cmluZywgbmFtZTogc3RyaW5nfT4oKSxcbiAgICBjaGFyYWN0ZXJzSW5kZXg6IDAsXG4gICAgdG90YWxNb25leTogMCxcbiAgICBhbGxpYW5jZUhvcmRlTWFwOiBuZXcgTWFwKCksXG4gICAgY2hhcmFjdGVyQ2xhc3NNYXA6IG5ldyBNYXAoKSxcblxuICB9LFxuXG4gIGJlaGF2aW9yczogW10sXG5cblxuICBsaWZldGltZXM6IHtcbiAgICByZWFkeSgpIHtcbiAgICB9XG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGluaXREYXRhKCkge1xuICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgdXNlcklkOiB3eC5nZXRTdG9yYWdlU3luYygndXNlcklkJyksXG4gICAgICAgIGFsbGlhbmNlSG9yZGVNYXA6IG5ldyBNYXAoW1sxLCAn6IGU55ufJ10sIFsyLCAn6YOo6JC9J11dKSxcbiAgICAgICAgY2hhcmFjdGVyQ2xhc3NNYXA6IG5ldyBNYXAoW1sxLCAn5Zyj6aqR5aOrJ10sIFsyLCAn5oiY5aOrJ10sIFszLCAn5q275Lqh6aqR5aOrJ10sIFs0LCAn54yO5Lq6J10sIFs1LCAn6JCo5ruh56Wt5Y+4J10sIFs2LCAn5r2c6KGM6ICFJ10sIFs3LCAn5b636bKB5LyKJ10sIFs4LCAn5oG26a2U54yO5omLJ10sIFs5LCAn5rOV5biIJ10sIFsxMCwgJ+eJp+W4iCddLCBbMTEsICfmnK/lo6snXV0pXG4gICAgICB9KVxuICAgICAgdGhpcy5nZXRMZXZlbDEoKTtcbiAgICAgIHRoaXMuZ2V0Q2hhcmFjdGVycygpO1xuICAgIH0sXG4gICAgZ2V0TGV2ZWwxKCkge1xuICAgICAgYXBwLnJlcXVlc3RGdW5jUHJvbWlzZSgnL3N5c3RlbS9nZXRDYXRhbG9nTGlzdCcsIHtwYXJlbnRJZDogJzAnLCBjYXRhbG9nVHlwZTogcGFyc2VJbnQodGhpcy5kYXRhLmNhdGFsb2dUeXBlKX0sICdHRVQnKVxuICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzKTtcbiAgICAgICAgbGV0IGRhdGEgPSB7XG4gICAgICAgICAgbGV2ZWwxQ29udGVudDogbmV3IEFycmF5PHtpZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIG1vbmV5OiBudW1iZXJ9PigpLFxuICAgICAgICAgIGxldmVsMU1vbmV5OiByZXMuZGF0YS5jYXRhbG9nTGlzdFswXS5tb25leVxuICAgICAgICB9XG4gICAgICAgIHJlcy5kYXRhLmNhdGFsb2dMaXN0LmZvckVhY2goeCA9PiB7XG4gICAgICAgICAgZGF0YS5sZXZlbDFDb250ZW50LnB1c2goe2lkOiB4LmlkLCBuYW1lOiB4LmNhdGFsb2dOYW1lLCBtb25leTogeC5tb25leX0pICBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2V0RGF0YShkYXRhKTtcbiAgICAgICAgdGhpcy5nZXRMZXZlbDIocmVzLmRhdGEuY2F0YWxvZ0xpc3RbMF0uaWQpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChyZXMgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICAgICAgfSlcbiAgICB9LFxuICAgIGxldmVsMUNoYW5nZShlKSB7XG4gICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICBsZXZlbDFJbmRleDogcGFyc2VJbnQoZS5kZXRhaWwudmFsdWUpLFxuICAgICAgICBsZXZlbDFNb25leTogdGhpcy5kYXRhLmxldmVsMUNvbnRlbnRbcGFyc2VJbnQoZS5kZXRhaWwudmFsdWUpXS5tb25leVxuICAgICAgfSlcbiAgICAgIHRoaXMuZ2V0TGV2ZWwyKHRoaXMuZGF0YS5sZXZlbDFDb250ZW50W3RoaXMuZGF0YS5sZXZlbDFJbmRleF0uaWQpXG4gICAgfSxcbiAgICBnZXRMZXZlbDIocGFyZW50SWQ6IHN0cmluZykge1xuICAgICAgYXBwLnJlcXVlc3RGdW5jUHJvbWlzZSgnL3N5c3RlbS9nZXRDYXRhbG9nTGlzdCcsIHtwYXJlbnRJZDogcGFyZW50SWQsIGNhdGFsb2dUeXBlOiBwYXJzZUludCh0aGlzLmRhdGEuY2F0YWxvZ1R5cGUpfSwgJ0dFVCcpXG4gICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICAgICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICAgIGRpc3BsYXlUeXBlOiByZXMuZGF0YS5jYXRhbG9nTGlzdFswXS5jYXRhbG9nRGlzcGxheVR5cGUsXG4gICAgICAgICAgbGV2ZWwyRGlzcGxheU5hbWU6IHJlcy5kYXRhLmNhdGFsb2dMaXN0WzBdLmNhdGFsb2dEaXNwbGF5TmFtZSxcbiAgICAgICAgICBsZXZlbDJNb25leTogcmVzLmRhdGEuY2F0YWxvZ0xpc3RbMF0ubW9uZXlcbiAgICAgICAgfSkgXG4gICAgICAgIGlmKHRoaXMuZGF0YS5kaXNwbGF5VHlwZSA9PSAxKSB7XG4gICAgICAgICAgbGV0IGRhdGEgPSB7XG4gICAgICAgICAgICBsZXZlbDJDb250ZW50OiBuZXcgQXJyYXk8e2lkOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgbW9uZXk6IG51bWJlcn0+KCksXG4gICAgICAgICAgfVxuICAgICAgICAgIHJlcy5kYXRhLmNhdGFsb2dMaXN0LmZvckVhY2goeCA9PiB7XG4gICAgICAgICAgICBkYXRhLmxldmVsMkNvbnRlbnQucHVzaCh7aWQ6IHguaWQsIG5hbWU6IHguY2F0YWxvZ05hbWUsIG1vbmV5OiB4Lm1vbmV5fSkgIFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuc2V0RGF0YShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLmRhdGEuZGlzcGxheVR5cGUgPT0gMikge1xuICAgICAgICAgIGxldCB0ZW1wID0gcmVzLmRhdGEuY2F0YWxvZ0xpc3RbMF0uY2F0YWxvZ05hbWUuc3BsaXQoJy0nKTtcbiAgICAgICAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgICAgIGxldmVsMkN1cnJlbnRsZXZlbDogcGFyc2VJbnQodGVtcFswXSksXG4gICAgICAgICAgICBsZXZlbDJUYXJnZXRsZXZlbDogcGFyc2VJbnQodGVtcFsxXSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zZXREYXRhKGRhdGEpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYWxjVG90YWxNb25leSgpO1xuICAgICAgICB0aGlzLmdldExldmVsMyhyZXMuZGF0YS5jYXRhbG9nTGlzdFswXS5pZCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKHJlcyA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAgICB9KVxuICAgIH0sXG4gICAgbGV2ZWwyQ2hhbmdlKGUpIHtcbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIGxldmVsMkluZGV4OiBwYXJzZUludChlLmRldGFpbC52YWx1ZSksXG4gICAgICAgIGxldmVsMk1vbmV5OiB0aGlzLmRhdGEubGV2ZWwyQ29udGVudFtwYXJzZUludChlLmRldGFpbC52YWx1ZSldLm1vbmV5XG4gICAgICB9KVxuICAgICAgdGhpcy5nZXRMZXZlbDModGhpcy5kYXRhLmxldmVsMkNvbnRlbnRbdGhpcy5kYXRhLmxldmVsMkluZGV4XS5pZClcbiAgICB9LFxuICAgIGdldExldmVsMyhwYXJlbnRJZDogc3RyaW5nKSB7XG4gICAgICBhcHAucmVxdWVzdEZ1bmNQcm9taXNlKCcvc3lzdGVtL2dldENhdGFsb2dMaXN0Jywge3BhcmVudElkOiBwYXJlbnRJZCwgY2F0YWxvZ1R5cGU6IHBhcnNlSW50KHRoaXMuZGF0YS5jYXRhbG9nVHlwZSl9LCAnR0VUJylcbiAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAgICAgIGxldCBkYXRhID0ge1xuICAgICAgICAgIGxldmVsM0NvbnRlbnQ6IG5ldyBBcnJheTx7aWQ6IHN0cmluZywgbmFtZTogc3RyaW5nLCBtb25leTogbnVtYmVyfT4oKSxcbiAgICAgICAgICBsZXZlbDNEaXNwbGF5TmFtZTogcmVzLmRhdGEuY2F0YWxvZ0xpc3RbMF0uY2F0YWxvZ0Rpc3BsYXlOYW1lLFxuICAgICAgICAgIGxldmVsM01vbmV5OiByZXMuZGF0YS5jYXRhbG9nTGlzdFswXS5tb25leVxuICAgICAgICB9XG4gICAgICAgIHJlcy5kYXRhLmNhdGFsb2dMaXN0LmZvckVhY2goeCA9PiB7XG4gICAgICAgICAgZGF0YS5sZXZlbDNDb250ZW50LnB1c2goe2lkOiB4LmlkLCBuYW1lOiB4LmNhdGFsb2dOYW1lLCBtb25leTogeC5tb25leX0pICBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2V0RGF0YShkYXRhKTtcbiAgICAgICAgdGhpcy5jYWxjVG90YWxNb25leSgpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChyZXMgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICAgICAgfSlcbiAgICB9LFxuICAgIGxldmVsM0NoYW5nZShlKSB7XG4gICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICBsZXZlbDNJbmRleDogcGFyc2VJbnQoZS5kZXRhaWwudmFsdWUpLFxuICAgICAgICBsZXZlbDNNb25leTogdGhpcy5kYXRhLmxldmVsM0NvbnRlbnRbcGFyc2VJbnQoZS5kZXRhaWwudmFsdWUpXS5tb25leVxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgbGV2ZWwyQ3VycmVudExldmVsQmx1cigpIHtcbiAgICAgIHRoaXMuY2FsY1RvdGFsTW9uZXkoKTtcbiAgICB9LFxuICAgIGxldmVsMlRhcmdldExldmVsQmx1cigpIHtcbiAgICAgIHRoaXMuY2FsY1RvdGFsTW9uZXkoKTtcbiAgICB9LFxuXG4gICAgbGV2ZWwyQ3VycmVudExldmVsSW5wdXQoZSkge1xuICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgbGV2ZWwyQ3VycmVudGxldmVsOiBwYXJzZUludChlLmRldGFpbC52YWx1ZSlcbiAgICAgIH0pXG4gICAgfSxcbiAgICBsZXZlbDJUYXJnZXRMZXZlbElucHV0KGUpIHtcbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIGxldmVsMlRhcmdldGxldmVsOiBwYXJzZUludChlLmRldGFpbC52YWx1ZSlcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIGNhbGNUb3RhbE1vbmV5KCkge1xuICAgICAgaWYodGhpcy5kYXRhLmRpc3BsYXlUeXBlID09IDEpIHtcbiAgICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgICB0b3RhbE1vbmV5OiB0aGlzLmRhdGEubGV2ZWwxTW9uZXkgKyB0aGlzLmRhdGEubGV2ZWwyTW9uZXkgKyB0aGlzLmRhdGEubGV2ZWwzTW9uZXlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGlmKHRoaXMuZGF0YS5kaXNwbGF5VHlwZSA9PSAyKSB7XG4gICAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgICAgdG90YWxNb25leTogdGhpcy5kYXRhLmxldmVsMU1vbmV5ICsgICh0aGlzLmRhdGEubGV2ZWwyVGFyZ2V0bGV2ZWwgLSB0aGlzLmRhdGEubGV2ZWwyQ3VycmVudGxldmVsKSAqIHRoaXMuZGF0YS5sZXZlbDJNb25leSArIHRoaXMuZGF0YS5sZXZlbDNNb25leVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRDaGFyYWN0ZXJzKCkge1xuICAgICAgY29uc3QgX3RoaXMgPSB0aGlzO1xuICAgICAgYXBwLnJlcXVlc3RGdW5jKCcvdXNlci9nZXRDaGFyYWN0ZXJMaXN0Jywge3VzZXJJZDogdGhpcy5kYXRhLnVzZXJJZCwgcmVhbG1UeXBlOiB0aGlzLmRhdGEuY2F0YWxvZ1R5cGV9LCAnR0VUJywgcmVzID0+IHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzLmRhdGEpO1xuICAgICAgICAgIGlmIChyZXMuZGF0YS5zdWNjZXNzID09IHRydWUpIHtcbiAgICAgICAgICAgIGxldCBkYXRhID0ge1xuICAgICAgICAgICAgICBjaGFyYWN0ZXJzQ29udGVudDogbmV3IEFycmF5PHtpZDogc3RyaW5nLCBuYW1lOiBzdHJpbmd9PigpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXMuZGF0YS5saXN0LmZvckVhY2goeCA9PiB7XG4gICAgICAgICAgICAgIGRhdGEuY2hhcmFjdGVyc0NvbnRlbnQucHVzaCh7aWQ6IHguY2hhcmFjdGVySWQsIG5hbWU6IHguY2hhcmFjdGVyTmFtZSArICcoJyArIHguYWNjb3VudE5hbWUgKyAnKScgKyAnLycgKyBfdGhpcy5kYXRhLmFsbGlhbmNlSG9yZGVNYXAuZ2V0KHguYWxsaWFuY2VIb3JkZSkgKyAnLycgKyBfdGhpcy5kYXRhLmNoYXJhY3RlckNsYXNzTWFwLmdldCh4LmNoYXJhY3RlckNsYXNzKX0pICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5zZXREYXRhKGRhdGEpXG4gICAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIGNoYXJhY3RlcnNDaGFuZ2UoZSkge1xuICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgY2hhcmFjdGVyc0luZGV4OiBwYXJzZUludChlLmRldGFpbC52YWx1ZSlcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIGNoYW5nZUNhdGFsb2dUeXBlKGUpIHtcbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIGNhdGFsb2dUeXBlOiBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC50eXBlLFxuICAgICAgICBsZXZlbDFJbmRleDogMFxuICAgICAgfSlcbiAgICAgIHRoaXMuZ2V0TGV2ZWwxKCk7XG4gICAgICB0aGlzLmdldENoYXJhY3RlcnMoKTtcbiAgICB9LFxuICAgIE5hdlRvQ3JlYXRlT3JkZXIoKSB7XG4gICAgICBsZXQgdHJhbnNkYXRhID0ge1xuICAgICAgICBjaGFyYWN0ZXJOYW1lOiB0aGlzLmRhdGEuY2hhcmFjdGVyc0NvbnRlbnRbdGhpcy5kYXRhLmNoYXJhY3RlcnNJbmRleF0ubmFtZSxcbiAgICAgICAgb3JkZXJDYXRhbG9nOiAnJyxcbiAgICAgICAgb3JkZXJDYXRhbG9nMTogdGhpcy5kYXRhLmxldmVsMUNvbnRlbnRbdGhpcy5kYXRhLmxldmVsMUluZGV4XS5pZCxcbiAgICAgICAgb3JkZXJDYXRhbG9nMjogdGhpcy5kYXRhLmxldmVsMkNvbnRlbnRbdGhpcy5kYXRhLmxldmVsMkluZGV4XS5pZCxcbiAgICAgICAgb3JkZXJDYXRhbG9nMzogdGhpcy5kYXRhLmxldmVsM0NvbnRlbnRbdGhpcy5kYXRhLmxldmVsM0luZGV4XS5pZCxcbiAgICAgICAgbW9uZXk6IHRoaXMuZGF0YS50b3RhbE1vbmV5LFxuICAgICAgICBjaGFyYWN0ZXJJZDogdGhpcy5kYXRhLmNoYXJhY3RlcnNDb250ZW50W3RoaXMuZGF0YS5jaGFyYWN0ZXJzSW5kZXhdLmlkXG4gICAgICB9XG4gICAgICBpZih0aGlzLmRhdGEuZGlzcGxheVR5cGUgPT0gMSkge1xuICAgICAgICB0cmFuc2RhdGEub3JkZXJDYXRhbG9nID0gdGhpcy5kYXRhLmxldmVsMUNvbnRlbnRbdGhpcy5kYXRhLmxldmVsMUluZGV4XS5uYW1lICsgJy8nICsgdGhpcy5kYXRhLmxldmVsMkNvbnRlbnRbdGhpcy5kYXRhLmxldmVsMkluZGV4XS5uYW1lICsgJy8nICsgdGhpcy5kYXRhLmxldmVsM0NvbnRlbnRbdGhpcy5kYXRhLmxldmVsM0luZGV4XS5uYW1lXG4gICAgICB9XG4gICAgICBpZih0aGlzLmRhdGEuZGlzcGxheVR5cGUgPT0gMikge1xuICAgICAgICB0cmFuc2RhdGEub3JkZXJDYXRhbG9nID0gdGhpcy5kYXRhLmxldmVsMUNvbnRlbnRbdGhpcy5kYXRhLmxldmVsMUluZGV4XS5uYW1lICsgJy8nICsgdGhpcy5kYXRhLmxldmVsMkN1cnJlbnRsZXZlbCArICctJyArIHRoaXMuZGF0YS5sZXZlbDJUYXJnZXRsZXZlbCArICcvJyArIHRoaXMuZGF0YS5sZXZlbDNDb250ZW50W3RoaXMuZGF0YS5sZXZlbDNJbmRleF0ubmFtZVxuICAgICAgfVxuICAgICAgY29uc3QgY29tRGF0YSA9IEpTT04uc3RyaW5naWZ5KHRyYW5zZGF0YSlcbiAgICAgIHd4Lm5hdmlnYXRlVG8oe1xuICAgICAgICB1cmw6ICcuLi8uLi9PcmRlclNlcnZpY2UvT3JkZXJFbnRyeS9PcmRlckVudHJ5JyArICc/ZGF0YT0nICsgY29tRGF0YSxcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzKXsgfSxcbiAgICAgICAgZmFpbDogZnVuY3Rpb24oKSB7IH0sXG4gICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHsgfVxuICAgICAgfSlcbiAgICB9LFxuICB9XG59KSJdfQ==