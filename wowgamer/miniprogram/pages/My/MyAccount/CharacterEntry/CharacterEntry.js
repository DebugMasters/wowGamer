"use strict";
const app = getApp();
Page({
    data: {
        mode: '',
        realmType: 0,
        accountId: '',
        characterId: '',
        disableCheck1: false,
        specializations: new Array(),
        jobs: [
            ['联盟', '部落'],
            ['圣骑士', '战士', '死亡骑士', '猎人', '萨满祭司', '潜行者', '德鲁伊', '恶魔猎手', '法师', '牧师', '术士', '武僧']
        ],
        jobIndex: [0, 0],
        zones: new Array(),
        serversList: new Array(),
        serverIndex: [0, 0],
    },
    onLoad(option) {
        if (option.mode == 'AddNew') {
            const realmtype = option.realmType ? parseInt(option.realmType.toString()) : 1;
            this.getRealmList(realmtype);
            this.getCharacterSpec(1);
            this.setData({
                mode: option.mode,
                realmType: realmtype,
                accountId: option.accountId
            });
        }
        else if (option.mode == 'Modify') {
            this.setData({
                mode: option.mode,
                characterId: option.characterId,
                accountId: option.accountId
            });
        }
    },
    onShow() {
        const _this = this;
        if (this.data.mode == 'Modify') {
            app.requestFunc('/user/getCharacter', { characterId: this.data.characterId }, 'GET', res => {
                console.log(res.data);
                if (res.data.success == true) {
                    let tempJobIndex = [res.data.data.allianceHorde - 1, res.data.data.characterClass - 1];
                    let tempServerIndex = [0, 0];
                    this.getRealmList(res.data.data.realmType, parseInt(res.data.data.realmZone), () => {
                        this.data.serversList[0].forEach((x, index) => {
                            if (x.id == res.data.data.realmZone) {
                                tempServerIndex[0] = index;
                            }
                        });
                        this.data.serversList[1].forEach((x, index) => {
                            if (x.id == res.data.data.characterRealm) {
                                tempServerIndex[1] = index;
                            }
                        });
                        this.setData({
                            characterName: res.data.data.characterName,
                            realmType: res.data.data.realmType,
                            jobIndex: tempJobIndex,
                            serverIndex: tempServerIndex
                        });
                    });
                    res.data.data.characterSpecialization.split('#').forEach(x => {
                        let temp = x.split(':');
                        let data = {
                            specializations: _this.data.specializations
                        };
                        data.specializations.push({ name: temp[0], value: parseInt(temp[1]) == 0 ? NaN : parseInt(temp[1]), checked: parseInt(temp[1]) > 0 ? true : false });
                        this.setData(data);
                    });
                }
            });
        }
    },
    getCharacterSpec(characterClass) {
        const _this = this;
        app.requestFunc('/system/getCharacterSpec', { characterClass: characterClass }, 'GET', res => {
            console.log('res.data :', res.data);
            if (res.data.success == true) {
                let data = {
                    specializations: new Array(),
                };
                res.data.specList.forEach(x => {
                    data.specializations.push({ name: x, value: NaN, checked: false });
                });
                this.setData(data);
            }
        });
    },
    getRealmList(realmType, realmZone, callback) {
        if (realmType == 1) {
            this.setData({
                zones: [{ id: '0', name: '推荐服务器' }, { id: '1', name: '一区' }, { id: '3', name: '三区' }, { id: '5', name: '五区' }, { id: '10', name: '十区' }]
            });
            realmZone = realmZone ? realmZone : 0;
        }
        if (realmType == 2) {
            this.setData({
                zones: [{ id: '1', name: '一区' }, { id: '5', name: '五区' }]
            });
            realmZone = realmZone ? realmZone : 1;
        }
        const _this = this;
        app.requestFunc('/system/getRealmList', { realmType: realmType, realmZone: realmZone }, 'GET', res => {
            console.log(res.data);
            if (res.data.success == true) {
                let tempServers = new Array();
                res.data.realmList.forEach(x => {
                    tempServers.push({ id: x.realmId.toString(), name: x.realmName });
                });
                let tempserversList = new Array();
                tempserversList.push(_this.data.zones);
                tempserversList.push(tempServers);
                this.setData({
                    serversList: tempserversList
                });
                if (typeof (callback) == "function") {
                    callback();
                }
            }
        });
    },
    formSubmit(e) {
        const _this = this;
        let specString = '';
        let checkValid = true;
        this.data.specializations.every(x => {
            if ((x.checked && !isNaN(x.value) && x.value > 0) || !x.checked) {
                specString += x.name + ':' + (x.checked ? x.value.toString() : '0') + '#';
                return true;
            }
            else {
                if (x.checked && !isNaN(x.value) && x.value <= 0) {
                    wx.showToast({
                        title: '专精等级必须大于0',
                        icon: 'none',
                        duration: 1000
                    });
                    checkValid = false;
                    return false;
                }
                else {
                    wx.showToast({
                        title: '请输入专精等级',
                        icon: 'none',
                        duration: 1000
                    });
                }
                checkValid = false;
                return false;
            }
        });
        if (!checkValid) {
            return;
        }
        specString = specString.substring(0, specString.length - 1);
        let detailData = {
            characterId: '',
            characterName: e.detail.value.characterName,
            characterAccount: this.data.accountId,
            characterRealm: this.data.serversList[1][this.data.serverIndex[1]].id,
            characterRealmZone: this.data.serversList[0][this.data.serverIndex[0]].id,
            characterRealmType: this.data.realmType,
            characterClass: this.data.jobIndex[1] + 1,
            allianceHorde: this.data.jobIndex[0] + 1,
            characterSpecialization: specString,
            userId: wx.getStorageSync('userId')
        };
        if (this.data.mode == 'Modify') {
            detailData.characterId = this.data.characterId;
        }
        app.requestFunc('/user/saveCharacter', detailData, 'POST', res => {
            console.log(res.data);
            if (res.data.success == true) {
                wx.showToast({
                    title: res.data.msg,
                    icon: 'success',
                    duration: 1000
                });
                wx.navigateBack({
                    delta: _this.data.mode == 'AddNew' ? 2 : 1
                });
            }
            else {
                wx.showToast({
                    title: res.data.msg,
                    icon: 'none',
                    duration: 1000
                });
            }
        });
    },
    jobsChange(e) {
        this.getCharacterSpec(e.detail.value[1] + 1);
    },
    jobsColumnChange(e) {
        let data = {
            jobs: this.data.jobs,
            jobIndex: this.data.jobIndex
        };
        data.jobIndex[e.detail.column] = e.detail.value;
        switch (e.detail.column) {
            case 0:
                switch (data.jobIndex[0]) {
                    case 0:
                        data.jobs[1] = ['圣骑士', '战士', '死亡骑士', '猎人', '萨满祭司', '潜行者', '德鲁伊', '恶魔猎手', '法师', '牧师', '术士', '武僧'];
                        break;
                    case 1:
                        data.jobs[1] = ['圣骑士', '战士', '死亡骑士', '猎人', '萨满祭司', '潜行者', '德鲁伊', '恶魔猎手', '法师', '牧师', '术士', '武僧'];
                        break;
                }
                data.jobIndex[1] = 0;
                break;
            case 1:
        }
        this.setData(data);
    },
    serversColumnChange(e) {
        let data = {
            serverIndex: this.data.serverIndex
        };
        data.serverIndex[e.detail.column] = e.detail.value;
        switch (e.detail.column) {
            case 0:
                this.getRealmList(this.data.realmType, parseInt(this.data.serversList[0][e.detail.value].id));
                data.serverIndex[1] = 0;
                break;
        }
        this.setData(data);
    },
    checkboxChange: function (e) {
        let templist = this.data.specializations;
        templist.forEach(r => {
            if (e.detail.value.indexOf(r.name) >= 0) {
                r.checked = true;
            }
            else {
                r.checked = false;
            }
        });
        this.setData({
            specializations: templist
        });
    },
    inputlevel: function (e) {
        let v = e.detail.value;
        let n = e.currentTarget.dataset.name;
        let templist = this.data.specializations;
        templist.forEach(r => {
            if (n.indexOf(r.name) >= 0) {
                r.value = parseInt(v);
            }
        });
        this.setData({
            specializations: templist
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhcmFjdGVyRW50cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDaGFyYWN0ZXJFbnRyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxFQUFjLENBQUE7QUFFaEMsSUFBSSxDQUFDO0lBQ0gsSUFBSSxFQUFFO1FBQ0osSUFBSSxFQUFFLEVBQUU7UUFDUixTQUFTLEVBQUUsQ0FBQztRQUNaLFNBQVMsRUFBRSxFQUFFO1FBQ2IsV0FBVyxFQUFFLEVBQUU7UUFDZixhQUFhLEVBQUUsS0FBSztRQUNwQixlQUFlLEVBQUUsSUFBSSxLQUFLLEVBQW9EO1FBQzlFLElBQUksRUFBRTtZQUNKLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztZQUNaLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7U0FDbEY7UUFDRCxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLEtBQUssRUFBQyxJQUFJLEtBQUssRUFBK0I7UUFDOUMsV0FBVyxFQUFFLElBQUksS0FBSyxFQUF3QztRQUM5RCxXQUFXLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3BCO0lBQ0QsTUFBTSxDQUFDLE1BQU07UUFDWCxJQUFHLE1BQU0sQ0FBQyxJQUFJLElBQUksUUFBUSxFQUFFO1lBQzFCLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvRSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzdCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNYLElBQUksRUFBRyxNQUFNLENBQUMsSUFBSTtnQkFDbEIsU0FBUyxFQUFFLFNBQVM7Z0JBQ3BCLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUzthQUM1QixDQUFDLENBQUE7U0FDSDthQUFNLElBQUksTUFBTSxDQUFDLElBQUksSUFBSSxRQUFRLEVBQUU7WUFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDWCxJQUFJLEVBQUcsTUFBTSxDQUFDLElBQUk7Z0JBQ2xCLFdBQVcsRUFBRSxNQUFNLENBQUMsV0FBVztnQkFDL0IsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTO2FBQzVCLENBQUMsQ0FBQTtTQUNIO0lBQ0gsQ0FBQztJQUNELE1BQU07UUFDSixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxRQUFRLEVBQUU7WUFDN0IsR0FBRyxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsRUFBRSxFQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBQyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsRUFBRTtnQkFDdkYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3RCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO29CQUM1QixJQUFJLFlBQVksR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUN2RixJQUFJLGVBQWUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDN0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUcsRUFBRTt3QkFDakYsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFOzRCQUM1QyxJQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO2dDQUNsQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDOzZCQUM1Qjt3QkFDSCxDQUFDLENBQUMsQ0FBQTt3QkFDRixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUU7NEJBQzVDLElBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7Z0NBQ3ZDLGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7NkJBQzVCO3dCQUNILENBQUMsQ0FBQyxDQUFBO3dCQUNGLElBQUksQ0FBQyxPQUFPLENBQUM7NEJBQ1gsYUFBYSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWE7NEJBQzFDLFNBQVMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTOzRCQUNsQyxRQUFRLEVBQUUsWUFBWTs0QkFDdEIsV0FBVyxFQUFFLGVBQWU7eUJBQzdCLENBQUMsQ0FBQTtvQkFDSixDQUFDLENBQUMsQ0FBQztvQkFFSCxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO3dCQUMzRCxJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUN4QixJQUFJLElBQUksR0FBRzs0QkFDVCxlQUFlLEVBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxlQUFlO3lCQUM3QyxDQUFDO3dCQUNGLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQSxDQUFDLENBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQzt3QkFDbEosSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDckIsQ0FBQyxDQUFDLENBQUM7aUJBQ0o7WUFDSCxDQUFDLENBQUMsQ0FBQTtTQUNIO0lBQ0gsQ0FBQztJQUNELGdCQUFnQixDQUFDLGNBQXNCO1FBQ3JDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQztRQUNuQixHQUFHLENBQUMsV0FBVyxDQUFDLDBCQUEwQixFQUFFLEVBQUMsY0FBYyxFQUFFLGNBQWMsRUFBQyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsRUFBRTtZQUN6RixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDcEMsSUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQUU7Z0JBQzNCLElBQUksSUFBSSxHQUFHO29CQUNULGVBQWUsRUFBRyxJQUFJLEtBQUssRUFBbUQ7aUJBQy9FLENBQUM7Z0JBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQSxFQUFFO29CQUMzQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztnQkFDbkUsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNwQjtRQUNILENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUNELFlBQVksQ0FBQyxTQUFpQixFQUFFLFNBQWtCLEVBQUUsUUFBbUI7UUFDckUsSUFBRyxTQUFTLElBQUksQ0FBQyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1gsS0FBSyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFDO2FBQy9ILENBQUMsQ0FBQTtZQUNGLFNBQVMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3ZDO1FBQ0QsSUFBRyxTQUFTLElBQUksQ0FBQyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1gsS0FBSyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFDO2FBQ3RELENBQUMsQ0FBQTtZQUNGLFNBQVMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3ZDO1FBQ0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ25CLEdBQUcsQ0FBQyxXQUFXLENBQUMsc0JBQXNCLEVBQUUsRUFBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUU7WUFDakcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdEIsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQUU7Z0JBQzVCLElBQUksV0FBVyxHQUFHLElBQUksS0FBSyxFQUFnQyxDQUFDO2dCQUM1RCxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQzdCLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUM7Z0JBQ2xFLENBQUMsQ0FBQyxDQUFDO2dCQUVMLElBQUksZUFBZSxHQUFHLElBQUksS0FBSyxFQUF3QyxDQUFDO2dCQUN4RSxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3ZDLGVBQWUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUM7b0JBQ1gsV0FBVyxFQUFFLGVBQWU7aUJBQzdCLENBQUMsQ0FBQTtnQkFDRixJQUFHLE9BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxVQUFVLEVBQUU7b0JBQ2pDLFFBQVEsRUFBRSxDQUFDO2lCQUNaO2FBQ0Y7UUFDRCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxVQUFVLENBQUMsQ0FBQztRQUNWLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNsQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUU7Z0JBQy9ELFVBQVUsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtnQkFDekUsT0FBTyxJQUFJLENBQUM7YUFDYjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxFQUFFO29CQUNoRCxFQUFFLENBQUMsU0FBUyxDQUFDO3dCQUNYLEtBQUssRUFBRSxXQUFXO3dCQUNsQixJQUFJLEVBQUUsTUFBTTt3QkFDWixRQUFRLEVBQUUsSUFBSTtxQkFDZixDQUFDLENBQUM7b0JBQ0gsVUFBVSxHQUFHLEtBQUssQ0FBQztvQkFDbkIsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7cUJBQU07b0JBQ0wsRUFBRSxDQUFDLFNBQVMsQ0FBQzt3QkFDWCxLQUFLLEVBQUUsU0FBUzt3QkFDaEIsSUFBSSxFQUFFLE1BQU07d0JBQ1osUUFBUSxFQUFFLElBQUk7cUJBQ2YsQ0FBQyxDQUFDO2lCQUNKO2dCQUNELFVBQVUsR0FBRyxLQUFLLENBQUM7Z0JBQ25CLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILElBQUcsQ0FBQyxVQUFVLEVBQUU7WUFDZCxPQUFPO1NBQ1I7UUFDRCxVQUFVLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUU1RCxJQUFJLFVBQVUsR0FBRztZQUNmLFdBQVcsRUFBRSxFQUFFO1lBQ2YsYUFBYSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWE7WUFDM0MsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTO1lBQ3JDLGNBQWMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDckUsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3pFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUztZQUN2QyxjQUFjLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUN6QyxhQUFhLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUN4Qyx1QkFBdUIsRUFBRSxVQUFVO1lBQ25DLE1BQU0sRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQztTQUNwQyxDQUFBO1FBQ0QsSUFBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxRQUFRLEVBQUU7WUFDN0IsVUFBVSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQTtTQUMvQztRQUVELEdBQUcsQ0FBQyxXQUFXLENBQUMscUJBQXFCLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRTtZQUMvRCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN0QixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRTtnQkFDNUIsRUFBRSxDQUFDLFNBQVMsQ0FBQztvQkFDWCxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHO29CQUNuQixJQUFJLEVBQUUsU0FBUztvQkFDZixRQUFRLEVBQUUsSUFBSTtpQkFDZixDQUFDLENBQUE7Z0JBQ0YsRUFBRSxDQUFDLFlBQVksQ0FBQztvQkFDZCxLQUFLLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUM7aUJBQ3pDLENBQUMsQ0FBQTthQUNIO2lCQUFNO2dCQUNMLEVBQUUsQ0FBQyxTQUFTLENBQUM7b0JBQ1gsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRztvQkFDbkIsSUFBSSxFQUFFLE1BQU07b0JBQ1osUUFBUSxFQUFFLElBQUk7aUJBQ2YsQ0FBQyxDQUFBO2FBQ0g7UUFDSCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxVQUFVLENBQUMsQ0FBQztRQUNWLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBQ0QsZ0JBQWdCLENBQUMsQ0FBQztRQUNoQixJQUFJLElBQUksR0FBRztZQUNULElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7WUFDcEIsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUTtTQUM3QixDQUFDO1FBQ0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2hELFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDdkIsS0FBSyxDQUFDO2dCQUNKLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDeEIsS0FBSyxDQUFDO3dCQUNKLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO3dCQUNqRyxNQUFNO29CQUNSLEtBQUssQ0FBQzt3QkFDSixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQzt3QkFDakcsTUFBTTtpQkFDVDtnQkFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDckIsTUFBTTtZQUNSLEtBQUssQ0FBQyxDQUFDO1NBQ1I7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFDRCxtQkFBbUIsQ0FBQyxDQUFDO1FBQ25CLElBQUksSUFBSSxHQUFHO1lBQ1QsV0FBVyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVztTQUNuQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ25ELFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDdkIsS0FBSyxDQUFDO2dCQUNKLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDOUYsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3hCLE1BQU07U0FDVDtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUVELGNBQWMsRUFBRSxVQUFVLENBQUM7UUFDekIsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDekMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNuQixJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN2QyxDQUFDLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQzthQUNsQjtpQkFBTTtnQkFDTCxDQUFDLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQzthQUNuQjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNYLGVBQWUsRUFBRSxRQUFRO1NBQzFCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxVQUFVLEVBQUUsVUFBVSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztRQUNyQyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUN6QyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ25CLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUMxQixDQUFDLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN2QjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNYLGVBQWUsRUFBRSxRQUFRO1NBQzFCLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbmRleC50c1xyXG4vLyDojrflj5blupTnlKjlrp7kvotcclxuY29uc3QgYXBwID0gZ2V0QXBwPElBcHBPcHRpb24+KClcclxuXHJcblBhZ2Uoe1xyXG4gIGRhdGE6IHtcclxuICAgIG1vZGU6ICcnLFxyXG4gICAgcmVhbG1UeXBlOiAwLFxyXG4gICAgYWNjb3VudElkIDonJyxcclxuICAgIGNoYXJhY3RlcklkOiAnJyxcclxuICAgIGRpc2FibGVDaGVjazE6IGZhbHNlLFxyXG4gICAgc3BlY2lhbGl6YXRpb25zOiBuZXcgQXJyYXk8e25hbWU6IHN0cmluZywgdmFsdWU6IG51bWJlciwgY2hlY2tlZDogYm9vbGVhbix9PigpLFxyXG4gICAgam9iczogW1xyXG4gICAgICBbJ+iBlOebnycsICfpg6jokL0nXSxcclxuICAgICAgWyflnKPpqpHlo6snLCAn5oiY5aOrJywgJ+atu+S6oemqkeWjqycsICfnjI7kuronLCAn6JCo5ruh56Wt5Y+4JywgJ+a9nOihjOiAhScsICflvrfpsoHkvIonLCAn5oG26a2U54yO5omLJywgJ+azleW4iCcsICfniafluIgnLCAn5pyv5aOrJywgJ+atpuWDpyddXHJcbiAgICBdLFxyXG4gICAgam9iSW5kZXg6IFswLCAwXSxcclxuICAgIHpvbmVzOm5ldyBBcnJheTx7aWQ6IHN0cmluZywgbmFtZTogc3RyaW5nIH0+KCksXHJcbiAgICBzZXJ2ZXJzTGlzdDogbmV3IEFycmF5PEFycmF5PHsgaWQ6IHN0cmluZzsgbmFtZTogc3RyaW5nOyB9Pj4oKSxcclxuICAgIHNlcnZlckluZGV4OiBbMCwgMF0sXHJcbiAgfSxcclxuICBvbkxvYWQob3B0aW9uKSB7XHJcbiAgICBpZihvcHRpb24ubW9kZSA9PSAnQWRkTmV3Jykge1xyXG4gICAgICBjb25zdCByZWFsbXR5cGUgPSBvcHRpb24ucmVhbG1UeXBlID8gcGFyc2VJbnQob3B0aW9uLnJlYWxtVHlwZS50b1N0cmluZygpKSA6IDE7XHJcbiAgICAgIHRoaXMuZ2V0UmVhbG1MaXN0KHJlYWxtdHlwZSk7XHJcbiAgICAgIHRoaXMuZ2V0Q2hhcmFjdGVyU3BlYygxKTtcclxuICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICBtb2RlIDogb3B0aW9uLm1vZGUsXHJcbiAgICAgICAgcmVhbG1UeXBlOiByZWFsbXR5cGUsXHJcbiAgICAgICAgYWNjb3VudElkOiBvcHRpb24uYWNjb3VudElkXHJcbiAgICAgIH0pXHJcbiAgICB9IGVsc2UgaWYgKG9wdGlvbi5tb2RlID09ICdNb2RpZnknKSB7XHJcbiAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgbW9kZSA6IG9wdGlvbi5tb2RlLFxyXG4gICAgICAgIGNoYXJhY3RlcklkOiBvcHRpb24uY2hhcmFjdGVySWQsXHJcbiAgICAgICAgYWNjb3VudElkOiBvcHRpb24uYWNjb3VudElkXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfSxcclxuICBvblNob3coKSB7XHJcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XHJcbiAgICBpZih0aGlzLmRhdGEubW9kZSA9PSAnTW9kaWZ5Jykge1xyXG4gICAgICBhcHAucmVxdWVzdEZ1bmMoJy91c2VyL2dldENoYXJhY3RlcicsIHtjaGFyYWN0ZXJJZDogdGhpcy5kYXRhLmNoYXJhY3RlcklkfSwgJ0dFVCcsIHJlcyA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2cocmVzLmRhdGEpO1xyXG4gICAgICAgIGlmIChyZXMuZGF0YS5zdWNjZXNzID09IHRydWUpIHtcclxuICAgICAgICAgIGxldCB0ZW1wSm9iSW5kZXggPSBbcmVzLmRhdGEuZGF0YS5hbGxpYW5jZUhvcmRlIC0gMSwgcmVzLmRhdGEuZGF0YS5jaGFyYWN0ZXJDbGFzcyAtIDFdO1xyXG4gICAgICAgICAgbGV0IHRlbXBTZXJ2ZXJJbmRleCA9IFswLCAwXTtcclxuICAgICAgICAgIHRoaXMuZ2V0UmVhbG1MaXN0KHJlcy5kYXRhLmRhdGEucmVhbG1UeXBlLCBwYXJzZUludChyZXMuZGF0YS5kYXRhLnJlYWxtWm9uZSksICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLnNlcnZlcnNMaXN0WzBdLmZvckVhY2goKHgsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYoeC5pZCA9PSByZXMuZGF0YS5kYXRhLnJlYWxtWm9uZSkge1xyXG4gICAgICAgICAgICAgICAgdGVtcFNlcnZlckluZGV4WzBdID0gaW5kZXg7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB0aGlzLmRhdGEuc2VydmVyc0xpc3RbMV0uZm9yRWFjaCgoeCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICBpZih4LmlkID09IHJlcy5kYXRhLmRhdGEuY2hhcmFjdGVyUmVhbG0pIHtcclxuICAgICAgICAgICAgICAgIHRlbXBTZXJ2ZXJJbmRleFsxXSA9IGluZGV4O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICAgICAgICBjaGFyYWN0ZXJOYW1lOiByZXMuZGF0YS5kYXRhLmNoYXJhY3Rlck5hbWUsXHJcbiAgICAgICAgICAgICAgcmVhbG1UeXBlOiByZXMuZGF0YS5kYXRhLnJlYWxtVHlwZSxcclxuICAgICAgICAgICAgICBqb2JJbmRleDogdGVtcEpvYkluZGV4LFxyXG4gICAgICAgICAgICAgIHNlcnZlckluZGV4OiB0ZW1wU2VydmVySW5kZXhcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHJlcy5kYXRhLmRhdGEuY2hhcmFjdGVyU3BlY2lhbGl6YXRpb24uc3BsaXQoJyMnKS5mb3JFYWNoKHggPT4ge1xyXG4gICAgICAgICAgICBsZXQgdGVtcCA9IHguc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgbGV0IGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgc3BlY2lhbGl6YXRpb25zIDogX3RoaXMuZGF0YS5zcGVjaWFsaXphdGlvbnNcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZGF0YS5zcGVjaWFsaXphdGlvbnMucHVzaCh7bmFtZTogdGVtcFswXSwgdmFsdWU6IHBhcnNlSW50KHRlbXBbMV0pID09IDAgPyBOYU4gOiBwYXJzZUludCh0ZW1wWzFdKSwgY2hlY2tlZDogcGFyc2VJbnQodGVtcFsxXSkgPiAwID8gdHJ1ZTogZmFsc2V9KTtcclxuICAgICAgICAgICAgdGhpcy5zZXREYXRhKGRhdGEpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH0sXHJcbiAgZ2V0Q2hhcmFjdGVyU3BlYyhjaGFyYWN0ZXJDbGFzczogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XHJcbiAgICBhcHAucmVxdWVzdEZ1bmMoJy9zeXN0ZW0vZ2V0Q2hhcmFjdGVyU3BlYycsIHtjaGFyYWN0ZXJDbGFzczogY2hhcmFjdGVyQ2xhc3N9LCAnR0VUJywgcmVzID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ3Jlcy5kYXRhIDonLCByZXMuZGF0YSk7XHJcbiAgICAgIGlmKHJlcy5kYXRhLnN1Y2Nlc3MgPT0gdHJ1ZSkge1xyXG4gICAgICAgIGxldCBkYXRhID0ge1xyXG4gICAgICAgICAgc3BlY2lhbGl6YXRpb25zIDogbmV3IEFycmF5PHtuYW1lOiBzdHJpbmcsIHZhbHVlOiBudW1iZXIsIGNoZWNrZWQ6IGJvb2xlYW59PigpLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVzLmRhdGEuc3BlY0xpc3QuZm9yRWFjaCh4PT4ge1xyXG4gICAgICAgICAgZGF0YS5zcGVjaWFsaXphdGlvbnMucHVzaCh7bmFtZTogeCwgdmFsdWU6IE5hTiwgY2hlY2tlZDogZmFsc2V9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNldERhdGEoZGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfSxcclxuICBnZXRSZWFsbUxpc3QocmVhbG1UeXBlOiBudW1iZXIsIHJlYWxtWm9uZT86IG51bWJlciwgY2FsbGJhY2s/OiBGdW5jdGlvbikge1xyXG4gICAgaWYocmVhbG1UeXBlID09IDEpIHtcclxuICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICB6b25lczogW3tpZDogJzAnLCBuYW1lOiAn5o6o6I2Q5pyN5Yqh5ZmoJ30sIHtpZDogJzEnLCBuYW1lOiAn5LiA5Yy6J30sIHtpZDogJzMnLCBuYW1lOiAn5LiJ5Yy6J30sIHtpZDogJzUnLCBuYW1lOiAn5LqU5Yy6J30sIHtpZDogJzEwJywgbmFtZTogJ+WNgeWMuid9XVxyXG4gICAgICB9KSBcclxuICAgICAgcmVhbG1ab25lID0gcmVhbG1ab25lID8gcmVhbG1ab25lIDogMDtcclxuICAgIH1cclxuICAgIGlmKHJlYWxtVHlwZSA9PSAyKSB7XHJcbiAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgem9uZXM6IFt7aWQ6ICcxJywgbmFtZTogJ+S4gOWMuid9LCB7aWQ6ICc1JywgbmFtZTogJ+S6lOWMuid9XVxyXG4gICAgICB9KSBcclxuICAgICAgcmVhbG1ab25lID0gcmVhbG1ab25lID8gcmVhbG1ab25lIDogMTtcclxuICAgIH1cclxuICAgIGNvbnN0IF90aGlzID0gdGhpcztcclxuICAgIGFwcC5yZXF1ZXN0RnVuYygnL3N5c3RlbS9nZXRSZWFsbUxpc3QnLCB7cmVhbG1UeXBlOiByZWFsbVR5cGUsIHJlYWxtWm9uZTogcmVhbG1ab25lfSwgJ0dFVCcsIHJlcyA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKHJlcy5kYXRhKTtcclxuICAgICAgaWYgKHJlcy5kYXRhLnN1Y2Nlc3MgPT0gdHJ1ZSkge1xyXG4gICAgICAgIGxldCB0ZW1wU2VydmVycyA9IG5ldyBBcnJheTx7aWQ6IHN0cmluZzsgbmFtZTogc3RyaW5nOyB9PigpO1xyXG4gICAgICAgIHJlcy5kYXRhLnJlYWxtTGlzdC5mb3JFYWNoKHggPT4ge1xyXG4gICAgICAgICAgdGVtcFNlcnZlcnMucHVzaCh7aWQ6IHgucmVhbG1JZC50b1N0cmluZygpLCBuYW1lOiB4LnJlYWxtTmFtZX0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgbGV0IHRlbXBzZXJ2ZXJzTGlzdCA9IG5ldyBBcnJheTxBcnJheTx7IGlkOiBzdHJpbmc7IG5hbWU6IHN0cmluZzsgfT4+KCk7XHJcbiAgICAgIHRlbXBzZXJ2ZXJzTGlzdC5wdXNoKF90aGlzLmRhdGEuem9uZXMpO1xyXG4gICAgICB0ZW1wc2VydmVyc0xpc3QucHVzaCh0ZW1wU2VydmVycyk7XHJcbiAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgc2VydmVyc0xpc3Q6IHRlbXBzZXJ2ZXJzTGlzdFxyXG4gICAgICB9KVxyXG4gICAgICBpZih0eXBlb2YoY2FsbGJhY2spID09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIH0pXHJcbiAgfSxcclxuXHJcbiAgZm9ybVN1Ym1pdChlKSB7XHJcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgc3BlY1N0cmluZyA9ICcnO1xyXG4gICAgbGV0IGNoZWNrVmFsaWQgPSB0cnVlO1xyXG4gICAgdGhpcy5kYXRhLnNwZWNpYWxpemF0aW9ucy5ldmVyeSh4ID0+IHtcclxuICAgICAgaWYgKCh4LmNoZWNrZWQgJiYgIWlzTmFOKHgudmFsdWUpICYmIHgudmFsdWUgPiAwKSB8fCAheC5jaGVja2VkKSB7XHJcbiAgICAgICAgc3BlY1N0cmluZyArPSB4Lm5hbWUgKyAnOicgKyAoeC5jaGVja2VkID8geC52YWx1ZS50b1N0cmluZygpIDogJzAnKSArICcjJ1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmICh4LmNoZWNrZWQgJiYgIWlzTmFOKHgudmFsdWUpICYmIHgudmFsdWUgPD0gMCkge1xyXG4gICAgICAgICAgd3guc2hvd1RvYXN0KHtcclxuICAgICAgICAgICAgdGl0bGU6ICfkuJPnsr7nrYnnuqflv4XpobvlpKfkuo4wJyxcclxuICAgICAgICAgICAgaWNvbjogJ25vbmUnLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogMTAwMFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBjaGVja1ZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHd4LnNob3dUb2FzdCh7XHJcbiAgICAgICAgICAgIHRpdGxlOiAn6K+36L6T5YWl5LiT57K+562J57qnJyxcclxuICAgICAgICAgICAgaWNvbjogJ25vbmUnLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogMTAwMFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNoZWNrVmFsaWQgPSBmYWxzZTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgaWYoIWNoZWNrVmFsaWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgc3BlY1N0cmluZyA9IHNwZWNTdHJpbmcuc3Vic3RyaW5nKDAsIHNwZWNTdHJpbmcubGVuZ3RoIC0gMSk7XHJcblxyXG4gICAgbGV0IGRldGFpbERhdGEgPSB7XHJcbiAgICAgIGNoYXJhY3RlcklkOiAnJyxcclxuICAgICAgY2hhcmFjdGVyTmFtZTogZS5kZXRhaWwudmFsdWUuY2hhcmFjdGVyTmFtZSxcclxuICAgICAgY2hhcmFjdGVyQWNjb3VudDogdGhpcy5kYXRhLmFjY291bnRJZCxcclxuICAgICAgY2hhcmFjdGVyUmVhbG06IHRoaXMuZGF0YS5zZXJ2ZXJzTGlzdFsxXVt0aGlzLmRhdGEuc2VydmVySW5kZXhbMV1dLmlkLFxyXG4gICAgICBjaGFyYWN0ZXJSZWFsbVpvbmU6IHRoaXMuZGF0YS5zZXJ2ZXJzTGlzdFswXVt0aGlzLmRhdGEuc2VydmVySW5kZXhbMF1dLmlkLFxyXG4gICAgICBjaGFyYWN0ZXJSZWFsbVR5cGU6IHRoaXMuZGF0YS5yZWFsbVR5cGUsXHJcbiAgICAgIGNoYXJhY3RlckNsYXNzOiB0aGlzLmRhdGEuam9iSW5kZXhbMV0gKyAxLFxyXG4gICAgICBhbGxpYW5jZUhvcmRlOiB0aGlzLmRhdGEuam9iSW5kZXhbMF0gKyAxLFxyXG4gICAgICBjaGFyYWN0ZXJTcGVjaWFsaXphdGlvbjogc3BlY1N0cmluZyxcclxuICAgICAgdXNlcklkOiB3eC5nZXRTdG9yYWdlU3luYygndXNlcklkJylcclxuICAgIH1cclxuICAgIGlmKHRoaXMuZGF0YS5tb2RlID09ICdNb2RpZnknKSB7XHJcbiAgICAgIGRldGFpbERhdGEuY2hhcmFjdGVySWQgPSB0aGlzLmRhdGEuY2hhcmFjdGVySWRcclxuICAgIH1cclxuICAgIFxyXG4gICAgYXBwLnJlcXVlc3RGdW5jKCcvdXNlci9zYXZlQ2hhcmFjdGVyJywgZGV0YWlsRGF0YSwgJ1BPU1QnLCByZXMgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhyZXMuZGF0YSk7XHJcbiAgICAgIGlmIChyZXMuZGF0YS5zdWNjZXNzID09IHRydWUpIHtcclxuICAgICAgICB3eC5zaG93VG9hc3Qoe1xyXG4gICAgICAgICAgdGl0bGU6IHJlcy5kYXRhLm1zZyxcclxuICAgICAgICAgIGljb246ICdzdWNjZXNzJyxcclxuICAgICAgICAgIGR1cmF0aW9uOiAxMDAwXHJcbiAgICAgICAgfSlcclxuICAgICAgICB3eC5uYXZpZ2F0ZUJhY2soe1xyXG4gICAgICAgICAgZGVsdGE6IF90aGlzLmRhdGEubW9kZSA9PSAnQWRkTmV3Jz8gMjogMVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgd3guc2hvd1RvYXN0KHtcclxuICAgICAgICAgIHRpdGxlOiByZXMuZGF0YS5tc2csXHJcbiAgICAgICAgICBpY29uOiAnbm9uZScsXHJcbiAgICAgICAgICBkdXJhdGlvbjogMTAwMFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfSxcclxuICBqb2JzQ2hhbmdlKGUpIHtcclxuICAgIHRoaXMuZ2V0Q2hhcmFjdGVyU3BlYyhlLmRldGFpbC52YWx1ZVsxXSArIDEpO1xyXG4gIH0sXHJcbiAgam9ic0NvbHVtbkNoYW5nZShlKSB7XHJcbiAgICBsZXQgZGF0YSA9IHtcclxuICAgICAgam9iczogdGhpcy5kYXRhLmpvYnMsXHJcbiAgICAgIGpvYkluZGV4OiB0aGlzLmRhdGEuam9iSW5kZXhcclxuICAgIH07XHJcbiAgICBkYXRhLmpvYkluZGV4W2UuZGV0YWlsLmNvbHVtbl0gPSBlLmRldGFpbC52YWx1ZTtcclxuICAgIHN3aXRjaCAoZS5kZXRhaWwuY29sdW1uKSB7XHJcbiAgICAgIGNhc2UgMDpcclxuICAgICAgICBzd2l0Y2ggKGRhdGEuam9iSW5kZXhbMF0pIHtcclxuICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgZGF0YS5qb2JzWzFdID0gWyflnKPpqpHlo6snLCAn5oiY5aOrJywgJ+atu+S6oemqkeWjqycsICfnjI7kuronLCAn6JCo5ruh56Wt5Y+4JywgJ+a9nOihjOiAhScsICflvrfpsoHkvIonLCAn5oG26a2U54yO5omLJywgJ+azleW4iCcsICfniafluIgnLCAn5pyv5aOrJywgJ+atpuWDpyddO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgZGF0YS5qb2JzWzFdID0gWyflnKPpqpHlo6snLCAn5oiY5aOrJywgJ+atu+S6oemqkeWjqycsICfnjI7kuronLCAn6JCo5ruh56Wt5Y+4JywgJ+a9nOihjOiAhScsICflvrfpsoHkvIonLCAn5oG26a2U54yO5omLJywgJ+azleW4iCcsICfniafluIgnLCAn5pyv5aOrJywgJ+atpuWDpyddO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgZGF0YS5qb2JJbmRleFsxXSA9IDA7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgMTpcclxuICAgIH1cclxuICAgIHRoaXMuc2V0RGF0YShkYXRhKTtcclxuICB9LFxyXG4gIHNlcnZlcnNDb2x1bW5DaGFuZ2UoZSkge1xyXG4gICAgbGV0IGRhdGEgPSB7XHJcbiAgICAgIHNlcnZlckluZGV4OiB0aGlzLmRhdGEuc2VydmVySW5kZXhcclxuICAgIH07XHJcbiAgICBkYXRhLnNlcnZlckluZGV4W2UuZGV0YWlsLmNvbHVtbl0gPSBlLmRldGFpbC52YWx1ZTtcclxuICAgIHN3aXRjaCAoZS5kZXRhaWwuY29sdW1uKSB7XHJcbiAgICAgIGNhc2UgMDpcclxuICAgICAgICB0aGlzLmdldFJlYWxtTGlzdCh0aGlzLmRhdGEucmVhbG1UeXBlLCBwYXJzZUludCh0aGlzLmRhdGEuc2VydmVyc0xpc3RbMF1bZS5kZXRhaWwudmFsdWVdLmlkKSk7XHJcbiAgICAgICAgZGF0YS5zZXJ2ZXJJbmRleFsxXSA9IDA7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNldERhdGEoZGF0YSk7XHJcbiAgfSxcclxuXHJcbiAgY2hlY2tib3hDaGFuZ2U6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICBsZXQgdGVtcGxpc3QgPSB0aGlzLmRhdGEuc3BlY2lhbGl6YXRpb25zO1xyXG4gICAgdGVtcGxpc3QuZm9yRWFjaChyID0+IHtcclxuICAgICAgaWYgKGUuZGV0YWlsLnZhbHVlLmluZGV4T2Yoci5uYW1lKSA+PSAwKSB7XHJcbiAgICAgICAgci5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICBzcGVjaWFsaXphdGlvbnM6IHRlbXBsaXN0XHJcbiAgICB9KVxyXG4gIH0sXHJcbiAgaW5wdXRsZXZlbDogZnVuY3Rpb24gKGUpIHtcclxuICAgIGxldCB2ID0gZS5kZXRhaWwudmFsdWU7XHJcbiAgICBsZXQgbiA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0Lm5hbWU7XHJcbiAgICBsZXQgdGVtcGxpc3QgPSB0aGlzLmRhdGEuc3BlY2lhbGl6YXRpb25zO1xyXG4gICAgdGVtcGxpc3QuZm9yRWFjaChyID0+IHtcclxuICAgICAgaWYgKG4uaW5kZXhPZihyLm5hbWUpID49IDApIHtcclxuICAgICAgICByLnZhbHVlID0gcGFyc2VJbnQodik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgc3BlY2lhbGl6YXRpb25zOiB0ZW1wbGlzdFxyXG4gICAgfSlcclxuICB9XHJcbn0pXHJcbiJdfQ==