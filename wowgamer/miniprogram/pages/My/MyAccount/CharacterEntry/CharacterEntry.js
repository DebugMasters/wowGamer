"use strict";
const app = getApp();
Page({
    data: {
        mode: '',
        realmType: 0,
        accountId: '',
        characterId: '',
        disableCheck1: false,
        specializations: new Array(),
        jobs: [
            ['联盟', '部落'],
            ['圣骑士', '战士', '死亡骑士', '猎人', '萨满祭司', '潜行者', '德鲁伊', '恶魔猎手', '法师', '牧师', '术士']
        ],
        jobIndex: [0, 0],
        zones: new Array(),
        serversList: new Array(),
        serverIndex: [0, 0],
    },
    onLoad(option) {
        if (option.mode == 'AddNew') {
            const realmtype = option.realmType ? parseInt(option.realmType.toString()) : 1;
            this.getRealmList(realmtype);
            this.getCharacterSpec(1);
            this.setData({
                mode: option.mode,
                realmType: realmtype,
                accountId: option.accountId
            });
        }
        else if (option.mode == 'Modify') {
            this.setData({
                mode: option.mode,
                characterId: option.characterId,
                accountId: option.accountId
            });
        }
    },
    onShow() {
        const _this = this;
        if (this.data.mode == 'Modify') {
            app.requestFunc('/user/getCharacter', { characterId: this.data.characterId }, 'GET', res => {
                console.log(res.data);
                if (res.data.success == true) {
                    let tempJobIndex = [res.data.data.allianceHorde - 1, res.data.data.characterClass - 1];
                    let tempServerIndex = [0, 0];
                    this.getRealmList(res.data.data.characterRealmType, parseInt(res.data.data.characterRealmZone), () => {
                        this.data.serversList[0].forEach((x, index) => {
                            if (x.id == res.data.data.characterRealmZone) {
                                tempServerIndex[0] = index;
                            }
                        });
                        this.data.serversList[1].forEach((x, index) => {
                            if (x.id == res.data.data.characterRealm) {
                                tempServerIndex[1] = index;
                            }
                        });
                        this.setData({
                            characterName: res.data.data.characterName,
                            realmType: res.data.data.characterRealmType,
                            jobIndex: tempJobIndex,
                            serverIndex: tempServerIndex
                        });
                    });
                    res.data.data.characterSpecialization.split('#').forEach(x => {
                        let temp = x.split(':');
                        let data = {
                            specializations: _this.data.specializations
                        };
                        data.specializations.push({ name: temp[0], value: parseInt(temp[1]) == 0 ? NaN : parseInt(temp[1]), checked: parseInt(temp[1]) > 0 ? true : false });
                        this.setData(data);
                    });
                }
            });
        }
    },
    getCharacterSpec(characterClass) {
        const _this = this;
        app.requestFunc('/system/getCharacterSpec', { characterClass: characterClass }, 'GET', res => {
            console.log('res.data :', res.data);
            if (res.data.success == true) {
                let data = {
                    specializations: new Array(),
                };
                res.data.specList.forEach(x => {
                    data.specializations.push({ name: x, value: NaN, checked: false });
                });
                this.setData(data);
            }
        });
    },
    getRealmList(realmType, realmZone, callback) {
        if (realmType == 1) {
            this.setData({
                zones: [{ id: '0', name: '推荐服务器' }, { id: '1', name: '一区' }, { id: '3', name: '三区' }, { id: '5', name: '五区' }, { id: '10', name: '十区' }]
            });
            realmZone = realmZone ? realmZone : 0;
        }
        if (realmType == 2) {
            this.setData({
                zones: [{ id: '1', name: '一区' }, { id: '5', name: '五区' }]
            });
            realmZone = realmZone ? realmZone : 1;
        }
        const _this = this;
        app.requestFunc('/system/getRealmList', { realmType: realmType, realmZone: realmZone }, 'GET', res => {
            console.log(res.data);
            if (res.data.success == true) {
                let tempServers = new Array();
                res.data.realmList.forEach(x => {
                    tempServers.push({ id: x.realmId.toString(), name: x.realmName });
                });
                let tempserversList = new Array();
                tempserversList.push(_this.data.zones);
                tempserversList.push(tempServers);
                this.setData({
                    serversList: tempserversList
                });
                if (typeof (callback) == "function") {
                    callback();
                }
            }
        });
    },
    formSubmit(e) {
        const _this = this;
        let specString = '';
        let checkValid = true;
        this.data.specializations.every(x => {
            if ((x.checked && !isNaN(x.value) && x.value > 0) || !x.checked) {
                specString += x.name + ':' + (x.checked ? x.value.toString() : '0') + '#';
                return true;
            }
            else {
                if (x.checked && !isNaN(x.value) && x.value <= 0) {
                    wx.showToast({
                        title: '专精等级必须大于0',
                        icon: 'none',
                        duration: 1000
                    });
                    checkValid = false;
                    return false;
                }
                else {
                    wx.showToast({
                        title: '请输入专精等级',
                        icon: 'none',
                        duration: 1000
                    });
                }
                checkValid = false;
                return false;
            }
        });
        if (!checkValid) {
            return;
        }
        specString = specString.substring(0, specString.length - 1);
        let detailData = {
            characterId: '',
            characterName: e.detail.value.characterName,
            characterAccount: this.data.accountId,
            characterRealm: this.data.serversList[1][this.data.serverIndex[1]].id,
            characterRealmZone: this.data.serversList[0][this.data.serverIndex[0]].id,
            characterRealmType: this.data.realmType,
            characterClass: this.data.jobIndex[1] + 1,
            allianceHorde: this.data.jobIndex[0] + 1,
            characterSpecialization: specString,
            userId: wx.getStorageSync('id')
        };
        if (this.data.mode == 'Modify') {
            detailData.characterId = this.data.characterId;
        }
        app.requestFunc('/user/saveCharacter', detailData, 'POST', res => {
            console.log(res.data);
            if (res.data.success == true) {
                wx.showToast({
                    title: res.data.msg,
                    icon: 'success',
                    duration: 1000
                });
                wx.navigateBack({
                    delta: _this.data.mode == 'AddNew' ? 2 : 1
                });
            }
            else {
                wx.showToast({
                    title: res.data.msg,
                    icon: 'none',
                    duration: 1000
                });
            }
        });
    },
    jobsChange(e) {
        this.getCharacterSpec(e.detail.value[1] + 1);
    },
    jobsColumnChange(e) {
        let data = {
            jobs: this.data.jobs,
            jobIndex: this.data.jobIndex
        };
        data.jobIndex[e.detail.column] = e.detail.value;
        switch (e.detail.column) {
            case 0:
                switch (data.jobIndex[0]) {
                    case 0:
                        data.jobs[1] = ['圣骑士', '战士', '死亡骑士', '猎人', '萨满祭司', '潜行者', '德鲁伊', '恶魔猎手', '法师', '牧师', '术士'];
                        break;
                    case 1:
                        data.jobs[1] = ['圣骑士', '战士', '死亡骑士', '猎人', '萨满祭司', '潜行者', '德鲁伊', '恶魔猎手', '法师', '牧师', '术士'];
                        break;
                }
                data.jobIndex[1] = 0;
                break;
            case 1:
        }
        this.setData(data);
    },
    serversColumnChange(e) {
        let data = {
            serverIndex: this.data.serverIndex
        };
        data.serverIndex[e.detail.column] = e.detail.value;
        switch (e.detail.column) {
            case 0:
                this.getRealmList(this.data.realmType, parseInt(this.data.serversList[0][e.detail.value].id));
                data.serverIndex[1] = 0;
                break;
        }
        this.setData(data);
    },
    checkboxChange: function (e) {
        let templist = this.data.specializations;
        templist.forEach(r => {
            if (e.detail.value.indexOf(r.name) >= 0) {
                r.checked = true;
            }
            else {
                r.checked = false;
            }
        });
        this.setData({
            specializations: templist
        });
    },
    inputlevel: function (e) {
        let v = e.detail.value;
        let n = e.currentTarget.dataset.name;
        let templist = this.data.specializations;
        templist.forEach(r => {
            if (n.indexOf(r.name) >= 0) {
                r.value = parseInt(v);
            }
        });
        this.setData({
            specializations: templist
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhcmFjdGVyRW50cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDaGFyYWN0ZXJFbnRyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxFQUFjLENBQUE7QUFFaEMsSUFBSSxDQUFDO0lBQ0gsSUFBSSxFQUFFO1FBQ0osSUFBSSxFQUFFLEVBQUU7UUFDUixTQUFTLEVBQUUsQ0FBQztRQUNaLFNBQVMsRUFBRSxFQUFFO1FBQ2IsV0FBVyxFQUFFLEVBQUU7UUFDZixhQUFhLEVBQUUsS0FBSztRQUNwQixlQUFlLEVBQUUsSUFBSSxLQUFLLEVBQW9EO1FBQzlFLElBQUksRUFBRTtZQUNKLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztZQUNaLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztTQUM1RTtRQUNELFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsS0FBSyxFQUFDLElBQUksS0FBSyxFQUErQjtRQUM5QyxXQUFXLEVBQUUsSUFBSSxLQUFLLEVBQXdDO1FBQzlELFdBQVcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7SUFDRCxNQUFNLENBQUMsTUFBTTtRQUNYLElBQUcsTUFBTSxDQUFDLElBQUksSUFBSSxRQUFRLEVBQUU7WUFDMUIsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9FLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1gsSUFBSSxFQUFHLE1BQU0sQ0FBQyxJQUFJO2dCQUNsQixTQUFTLEVBQUUsU0FBUztnQkFDcEIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTO2FBQzVCLENBQUMsQ0FBQTtTQUNIO2FBQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLFFBQVEsRUFBRTtZQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNYLElBQUksRUFBRyxNQUFNLENBQUMsSUFBSTtnQkFDbEIsV0FBVyxFQUFFLE1BQU0sQ0FBQyxXQUFXO2dCQUMvQixTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVM7YUFDNUIsQ0FBQyxDQUFBO1NBQ0g7SUFDSCxDQUFDO0lBQ0QsTUFBTTtRQUNKLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLFFBQVEsRUFBRTtZQUM3QixHQUFHLENBQUMsV0FBVyxDQUFDLG9CQUFvQixFQUFFLEVBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUFFO2dCQUN2RixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdEIsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQUU7b0JBQzVCLElBQUksWUFBWSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ3ZGLElBQUksZUFBZSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUM3QixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEdBQUcsRUFBRTt3QkFDbkcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFOzRCQUM1QyxJQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUU7Z0NBQzNDLGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7NkJBQzVCO3dCQUNILENBQUMsQ0FBQyxDQUFBO3dCQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRTs0QkFDNUMsSUFBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtnQ0FDdkMsZUFBZSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQzs2QkFDNUI7d0JBQ0gsQ0FBQyxDQUFDLENBQUE7d0JBQ0YsSUFBSSxDQUFDLE9BQU8sQ0FBQzs0QkFDWCxhQUFhLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYTs0QkFDMUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQjs0QkFDM0MsUUFBUSxFQUFFLFlBQVk7NEJBQ3RCLFdBQVcsRUFBRSxlQUFlO3lCQUM3QixDQUFDLENBQUE7b0JBQ0osQ0FBQyxDQUFDLENBQUM7b0JBRUgsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTt3QkFDM0QsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFDeEIsSUFBSSxJQUFJLEdBQUc7NEJBQ1QsZUFBZSxFQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsZUFBZTt5QkFDN0MsQ0FBQzt3QkFDRixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUEsQ0FBQyxDQUFDLEtBQUssRUFBQyxDQUFDLENBQUM7d0JBQ2xKLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3JCLENBQUMsQ0FBQyxDQUFDO2lCQUNKO1lBQ0gsQ0FBQyxDQUFDLENBQUE7U0FDSDtJQUNILENBQUM7SUFDRCxnQkFBZ0IsQ0FBQyxjQUFzQjtRQUNyQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbkIsR0FBRyxDQUFDLFdBQVcsQ0FBQywwQkFBMEIsRUFBRSxFQUFDLGNBQWMsRUFBRSxjQUFjLEVBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUU7WUFDekYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BDLElBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO2dCQUMzQixJQUFJLElBQUksR0FBRztvQkFDVCxlQUFlLEVBQUcsSUFBSSxLQUFLLEVBQW1EO2lCQUMvRSxDQUFDO2dCQUNGLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUEsRUFBRTtvQkFDM0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUM7Z0JBQ25FLENBQUMsQ0FBQyxDQUFDO2dCQUNILElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDcEI7UUFDSCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxZQUFZLENBQUMsU0FBaUIsRUFBRSxTQUFrQixFQUFFLFFBQW1CO1FBQ3JFLElBQUcsU0FBUyxJQUFJLENBQUMsRUFBRTtZQUNqQixJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNYLEtBQUssRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQzthQUMvSCxDQUFDLENBQUE7WUFDRixTQUFTLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN2QztRQUNELElBQUcsU0FBUyxJQUFJLENBQUMsRUFBRTtZQUNqQixJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNYLEtBQUssRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQzthQUN0RCxDQUFDLENBQUE7WUFDRixTQUFTLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN2QztRQUNELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQztRQUNuQixHQUFHLENBQUMsV0FBVyxDQUFDLHNCQUFzQixFQUFFLEVBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ2pHLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3RCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO2dCQUM1QixJQUFJLFdBQVcsR0FBRyxJQUFJLEtBQUssRUFBZ0MsQ0FBQztnQkFDNUQsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUM3QixXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDO2dCQUNsRSxDQUFDLENBQUMsQ0FBQztnQkFFTCxJQUFJLGVBQWUsR0FBRyxJQUFJLEtBQUssRUFBd0MsQ0FBQztnQkFDeEUsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN2QyxlQUFlLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDO29CQUNYLFdBQVcsRUFBRSxlQUFlO2lCQUM3QixDQUFDLENBQUE7Z0JBQ0YsSUFBRyxPQUFNLENBQUMsUUFBUSxDQUFDLElBQUksVUFBVSxFQUFFO29CQUNqQyxRQUFRLEVBQUUsQ0FBQztpQkFDWjthQUNGO1FBQ0QsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBRUQsVUFBVSxDQUFDLENBQUM7UUFDVixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDbEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFO2dCQUMvRCxVQUFVLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUE7Z0JBQ3pFLE9BQU8sSUFBSSxDQUFDO2FBQ2I7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsRUFBRTtvQkFDaEQsRUFBRSxDQUFDLFNBQVMsQ0FBQzt3QkFDWCxLQUFLLEVBQUUsV0FBVzt3QkFDbEIsSUFBSSxFQUFFLE1BQU07d0JBQ1osUUFBUSxFQUFFLElBQUk7cUJBQ2YsQ0FBQyxDQUFDO29CQUNILFVBQVUsR0FBRyxLQUFLLENBQUM7b0JBQ25CLE9BQU8sS0FBSyxDQUFDO2lCQUNkO3FCQUFNO29CQUNMLEVBQUUsQ0FBQyxTQUFTLENBQUM7d0JBQ1gsS0FBSyxFQUFFLFNBQVM7d0JBQ2hCLElBQUksRUFBRSxNQUFNO3dCQUNaLFFBQVEsRUFBRSxJQUFJO3FCQUNmLENBQUMsQ0FBQztpQkFDSjtnQkFDRCxVQUFVLEdBQUcsS0FBSyxDQUFDO2dCQUNuQixPQUFPLEtBQUssQ0FBQzthQUNkO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFHLENBQUMsVUFBVSxFQUFFO1lBQ2QsT0FBTztTQUNSO1FBQ0QsVUFBVSxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFNUQsSUFBSSxVQUFVLEdBQUc7WUFDZixXQUFXLEVBQUUsRUFBRTtZQUNmLGFBQWEsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhO1lBQzNDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUztZQUNyQyxjQUFjLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3JFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN6RSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVM7WUFDdkMsY0FBYyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDekMsYUFBYSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDeEMsdUJBQXVCLEVBQUUsVUFBVTtZQUNuQyxNQUFNLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUM7U0FDaEMsQ0FBQTtRQUNELElBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksUUFBUSxFQUFFO1lBQzdCLFVBQVUsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUE7U0FDL0M7UUFFRCxHQUFHLENBQUMsV0FBVyxDQUFDLHFCQUFxQixFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUU7WUFDL0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdEIsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQUU7Z0JBQzVCLEVBQUUsQ0FBQyxTQUFTLENBQUM7b0JBQ1gsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRztvQkFDbkIsSUFBSSxFQUFFLFNBQVM7b0JBQ2YsUUFBUSxFQUFFLElBQUk7aUJBQ2YsQ0FBQyxDQUFBO2dCQUNGLEVBQUUsQ0FBQyxZQUFZLENBQUM7b0JBQ2QsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDO2lCQUN6QyxDQUFDLENBQUE7YUFDSDtpQkFBTTtnQkFDTCxFQUFFLENBQUMsU0FBUyxDQUFDO29CQUNYLEtBQUssRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUc7b0JBQ25CLElBQUksRUFBRSxNQUFNO29CQUNaLFFBQVEsRUFBRSxJQUFJO2lCQUNmLENBQUMsQ0FBQTthQUNIO1FBQ0gsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBQ0QsVUFBVSxDQUFDLENBQUM7UUFDVixJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUNELGdCQUFnQixDQUFDLENBQUM7UUFDaEIsSUFBSSxJQUFJLEdBQUc7WUFDVCxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQ3BCLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7U0FDN0IsQ0FBQztRQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUNoRCxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ3ZCLEtBQUssQ0FBQztnQkFDSixRQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ3hCLEtBQUssQ0FBQzt3QkFDSixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO3dCQUMzRixNQUFNO29CQUNSLEtBQUssQ0FBQzt3QkFDSixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO3dCQUMzRixNQUFNO2lCQUNUO2dCQUNELElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNyQixNQUFNO1lBQ1IsS0FBSyxDQUFDLENBQUM7U0FDUjtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUNELG1CQUFtQixDQUFDLENBQUM7UUFDbkIsSUFBSSxJQUFJLEdBQUc7WUFDVCxXQUFXLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXO1NBQ25DLENBQUM7UUFDRixJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDbkQsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUN2QixLQUFLLENBQUM7Z0JBQ0osSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUM5RixJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDeEIsTUFBTTtTQUNUO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUQsY0FBYyxFQUFFLFVBQVUsQ0FBQztRQUN6QixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUN6QyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ25CLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3ZDLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2FBQ2xCO2lCQUFNO2dCQUNMLENBQUMsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO2FBQ25CO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsZUFBZSxFQUFFLFFBQVE7U0FDMUIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUNELFVBQVUsRUFBRSxVQUFVLENBQUM7UUFDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ3JDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQ3pDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDbkIsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzFCLENBQUMsQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3ZCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsZUFBZSxFQUFFLFFBQVE7U0FDMUIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGluZGV4LnRzXG4vLyDojrflj5blupTnlKjlrp7kvotcbmNvbnN0IGFwcCA9IGdldEFwcDxJQXBwT3B0aW9uPigpXG5cblBhZ2Uoe1xuICBkYXRhOiB7XG4gICAgbW9kZTogJycsXG4gICAgcmVhbG1UeXBlOiAwLFxuICAgIGFjY291bnRJZCA6JycsXG4gICAgY2hhcmFjdGVySWQ6ICcnLFxuICAgIGRpc2FibGVDaGVjazE6IGZhbHNlLFxuICAgIHNwZWNpYWxpemF0aW9uczogbmV3IEFycmF5PHtuYW1lOiBzdHJpbmcsIHZhbHVlOiBudW1iZXIsIGNoZWNrZWQ6IGJvb2xlYW4sfT4oKSxcbiAgICBqb2JzOiBbXG4gICAgICBbJ+iBlOebnycsICfpg6jokL0nXSxcbiAgICAgIFsn5Zyj6aqR5aOrJywgJ+aImOWjqycsICfmrbvkuqHpqpHlo6snLCAn54yO5Lq6JywgJ+iQqOa7oeelreWPuCcsICfmvZzooYzogIUnLCAn5b636bKB5LyKJywgJ+aBtumtlOeMjuaJiycsICfms5XluIgnLCAn54mn5biIJywgJ+acr+WjqyddXG4gICAgXSxcbiAgICBqb2JJbmRleDogWzAsIDBdLFxuICAgIHpvbmVzOm5ldyBBcnJheTx7aWQ6IHN0cmluZywgbmFtZTogc3RyaW5nIH0+KCksXG4gICAgc2VydmVyc0xpc3Q6IG5ldyBBcnJheTxBcnJheTx7IGlkOiBzdHJpbmc7IG5hbWU6IHN0cmluZzsgfT4+KCksXG4gICAgc2VydmVySW5kZXg6IFswLCAwXSxcbiAgfSxcbiAgb25Mb2FkKG9wdGlvbikge1xuICAgIGlmKG9wdGlvbi5tb2RlID09ICdBZGROZXcnKSB7XG4gICAgICBjb25zdCByZWFsbXR5cGUgPSBvcHRpb24ucmVhbG1UeXBlID8gcGFyc2VJbnQob3B0aW9uLnJlYWxtVHlwZS50b1N0cmluZygpKSA6IDE7XG4gICAgICB0aGlzLmdldFJlYWxtTGlzdChyZWFsbXR5cGUpO1xuICAgICAgdGhpcy5nZXRDaGFyYWN0ZXJTcGVjKDEpO1xuICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgbW9kZSA6IG9wdGlvbi5tb2RlLFxuICAgICAgICByZWFsbVR5cGU6IHJlYWxtdHlwZSxcbiAgICAgICAgYWNjb3VudElkOiBvcHRpb24uYWNjb3VudElkXG4gICAgICB9KVxuICAgIH0gZWxzZSBpZiAob3B0aW9uLm1vZGUgPT0gJ01vZGlmeScpIHtcbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIG1vZGUgOiBvcHRpb24ubW9kZSxcbiAgICAgICAgY2hhcmFjdGVySWQ6IG9wdGlvbi5jaGFyYWN0ZXJJZCxcbiAgICAgICAgYWNjb3VudElkOiBvcHRpb24uYWNjb3VudElkXG4gICAgICB9KVxuICAgIH1cbiAgfSxcbiAgb25TaG93KCkge1xuICAgIGNvbnN0IF90aGlzID0gdGhpcztcbiAgICBpZih0aGlzLmRhdGEubW9kZSA9PSAnTW9kaWZ5Jykge1xuICAgICAgYXBwLnJlcXVlc3RGdW5jKCcvdXNlci9nZXRDaGFyYWN0ZXInLCB7Y2hhcmFjdGVySWQ6IHRoaXMuZGF0YS5jaGFyYWN0ZXJJZH0sICdHRVQnLCByZXMgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXMuZGF0YSk7XG4gICAgICAgIGlmIChyZXMuZGF0YS5zdWNjZXNzID09IHRydWUpIHtcbiAgICAgICAgICBsZXQgdGVtcEpvYkluZGV4ID0gW3Jlcy5kYXRhLmRhdGEuYWxsaWFuY2VIb3JkZSAtIDEsIHJlcy5kYXRhLmRhdGEuY2hhcmFjdGVyQ2xhc3MgLSAxXTtcbiAgICAgICAgICBsZXQgdGVtcFNlcnZlckluZGV4ID0gWzAsIDBdO1xuICAgICAgICAgIHRoaXMuZ2V0UmVhbG1MaXN0KHJlcy5kYXRhLmRhdGEuY2hhcmFjdGVyUmVhbG1UeXBlLCBwYXJzZUludChyZXMuZGF0YS5kYXRhLmNoYXJhY3RlclJlYWxtWm9uZSksICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5zZXJ2ZXJzTGlzdFswXS5mb3JFYWNoKCh4LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICBpZih4LmlkID09IHJlcy5kYXRhLmRhdGEuY2hhcmFjdGVyUmVhbG1ab25lKSB7XG4gICAgICAgICAgICAgICAgdGVtcFNlcnZlckluZGV4WzBdID0gaW5kZXg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLmRhdGEuc2VydmVyc0xpc3RbMV0uZm9yRWFjaCgoeCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgaWYoeC5pZCA9PSByZXMuZGF0YS5kYXRhLmNoYXJhY3RlclJlYWxtKSB7XG4gICAgICAgICAgICAgICAgdGVtcFNlcnZlckluZGV4WzFdID0gaW5kZXg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICAgICAgICBjaGFyYWN0ZXJOYW1lOiByZXMuZGF0YS5kYXRhLmNoYXJhY3Rlck5hbWUsXG4gICAgICAgICAgICAgIHJlYWxtVHlwZTogcmVzLmRhdGEuZGF0YS5jaGFyYWN0ZXJSZWFsbVR5cGUsXG4gICAgICAgICAgICAgIGpvYkluZGV4OiB0ZW1wSm9iSW5kZXgsXG4gICAgICAgICAgICAgIHNlcnZlckluZGV4OiB0ZW1wU2VydmVySW5kZXhcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXMuZGF0YS5kYXRhLmNoYXJhY3RlclNwZWNpYWxpemF0aW9uLnNwbGl0KCcjJykuZm9yRWFjaCh4ID0+IHtcbiAgICAgICAgICAgIGxldCB0ZW1wID0geC5zcGxpdCgnOicpO1xuICAgICAgICAgICAgbGV0IGRhdGEgPSB7XG4gICAgICAgICAgICAgIHNwZWNpYWxpemF0aW9ucyA6IF90aGlzLmRhdGEuc3BlY2lhbGl6YXRpb25zXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZGF0YS5zcGVjaWFsaXphdGlvbnMucHVzaCh7bmFtZTogdGVtcFswXSwgdmFsdWU6IHBhcnNlSW50KHRlbXBbMV0pID09IDAgPyBOYU4gOiBwYXJzZUludCh0ZW1wWzFdKSwgY2hlY2tlZDogcGFyc2VJbnQodGVtcFsxXSkgPiAwID8gdHJ1ZTogZmFsc2V9KTtcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YShkYXRhKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH0sXG4gIGdldENoYXJhY3RlclNwZWMoY2hhcmFjdGVyQ2xhc3M6IG51bWJlcikge1xuICAgIGNvbnN0IF90aGlzID0gdGhpcztcbiAgICBhcHAucmVxdWVzdEZ1bmMoJy9zeXN0ZW0vZ2V0Q2hhcmFjdGVyU3BlYycsIHtjaGFyYWN0ZXJDbGFzczogY2hhcmFjdGVyQ2xhc3N9LCAnR0VUJywgcmVzID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdyZXMuZGF0YSA6JywgcmVzLmRhdGEpO1xuICAgICAgaWYocmVzLmRhdGEuc3VjY2VzcyA9PSB0cnVlKSB7XG4gICAgICAgIGxldCBkYXRhID0ge1xuICAgICAgICAgIHNwZWNpYWxpemF0aW9ucyA6IG5ldyBBcnJheTx7bmFtZTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyLCBjaGVja2VkOiBib29sZWFufT4oKSxcbiAgICAgICAgfTtcbiAgICAgICAgcmVzLmRhdGEuc3BlY0xpc3QuZm9yRWFjaCh4PT4ge1xuICAgICAgICAgIGRhdGEuc3BlY2lhbGl6YXRpb25zLnB1c2goe25hbWU6IHgsIHZhbHVlOiBOYU4sIGNoZWNrZWQ6IGZhbHNlfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNldERhdGEoZGF0YSk7XG4gICAgICB9XG4gICAgfSlcbiAgfSxcbiAgZ2V0UmVhbG1MaXN0KHJlYWxtVHlwZTogbnVtYmVyLCByZWFsbVpvbmU/OiBudW1iZXIsIGNhbGxiYWNrPzogRnVuY3Rpb24pIHtcbiAgICBpZihyZWFsbVR5cGUgPT0gMSkge1xuICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgem9uZXM6IFt7aWQ6ICcwJywgbmFtZTogJ+aOqOiNkOacjeWKoeWZqCd9LCB7aWQ6ICcxJywgbmFtZTogJ+S4gOWMuid9LCB7aWQ6ICczJywgbmFtZTogJ+S4ieWMuid9LCB7aWQ6ICc1JywgbmFtZTogJ+S6lOWMuid9LCB7aWQ6ICcxMCcsIG5hbWU6ICfljYHljLonfV1cbiAgICAgIH0pIFxuICAgICAgcmVhbG1ab25lID0gcmVhbG1ab25lID8gcmVhbG1ab25lIDogMDtcbiAgICB9XG4gICAgaWYocmVhbG1UeXBlID09IDIpIHtcbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIHpvbmVzOiBbe2lkOiAnMScsIG5hbWU6ICfkuIDljLonfSwge2lkOiAnNScsIG5hbWU6ICfkupTljLonfV1cbiAgICAgIH0pIFxuICAgICAgcmVhbG1ab25lID0gcmVhbG1ab25lID8gcmVhbG1ab25lIDogMTtcbiAgICB9XG4gICAgY29uc3QgX3RoaXMgPSB0aGlzO1xuICAgIGFwcC5yZXF1ZXN0RnVuYygnL3N5c3RlbS9nZXRSZWFsbUxpc3QnLCB7cmVhbG1UeXBlOiByZWFsbVR5cGUsIHJlYWxtWm9uZTogcmVhbG1ab25lfSwgJ0dFVCcsIHJlcyA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhyZXMuZGF0YSk7XG4gICAgICBpZiAocmVzLmRhdGEuc3VjY2VzcyA9PSB0cnVlKSB7XG4gICAgICAgIGxldCB0ZW1wU2VydmVycyA9IG5ldyBBcnJheTx7aWQ6IHN0cmluZzsgbmFtZTogc3RyaW5nOyB9PigpO1xuICAgICAgICByZXMuZGF0YS5yZWFsbUxpc3QuZm9yRWFjaCh4ID0+IHtcbiAgICAgICAgICB0ZW1wU2VydmVycy5wdXNoKHtpZDogeC5yZWFsbUlkLnRvU3RyaW5nKCksIG5hbWU6IHgucmVhbG1OYW1lfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICBsZXQgdGVtcHNlcnZlcnNMaXN0ID0gbmV3IEFycmF5PEFycmF5PHsgaWQ6IHN0cmluZzsgbmFtZTogc3RyaW5nOyB9Pj4oKTtcbiAgICAgIHRlbXBzZXJ2ZXJzTGlzdC5wdXNoKF90aGlzLmRhdGEuem9uZXMpO1xuICAgICAgdGVtcHNlcnZlcnNMaXN0LnB1c2godGVtcFNlcnZlcnMpO1xuICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgc2VydmVyc0xpc3Q6IHRlbXBzZXJ2ZXJzTGlzdFxuICAgICAgfSlcbiAgICAgIGlmKHR5cGVvZihjYWxsYmFjaykgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfVxuICAgIH0pXG4gIH0sXG5cbiAgZm9ybVN1Ym1pdChlKSB7XG4gICAgY29uc3QgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBzcGVjU3RyaW5nID0gJyc7XG4gICAgbGV0IGNoZWNrVmFsaWQgPSB0cnVlO1xuICAgIHRoaXMuZGF0YS5zcGVjaWFsaXphdGlvbnMuZXZlcnkoeCA9PiB7XG4gICAgICBpZiAoKHguY2hlY2tlZCAmJiAhaXNOYU4oeC52YWx1ZSkgJiYgeC52YWx1ZSA+IDApIHx8ICF4LmNoZWNrZWQpIHtcbiAgICAgICAgc3BlY1N0cmluZyArPSB4Lm5hbWUgKyAnOicgKyAoeC5jaGVja2VkID8geC52YWx1ZS50b1N0cmluZygpIDogJzAnKSArICcjJ1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh4LmNoZWNrZWQgJiYgIWlzTmFOKHgudmFsdWUpICYmIHgudmFsdWUgPD0gMCkge1xuICAgICAgICAgIHd4LnNob3dUb2FzdCh7XG4gICAgICAgICAgICB0aXRsZTogJ+S4k+eyvuetiee6p+W/hemhu+Wkp+S6jjAnLFxuICAgICAgICAgICAgaWNvbjogJ25vbmUnLFxuICAgICAgICAgICAgZHVyYXRpb246IDEwMDBcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjaGVja1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHd4LnNob3dUb2FzdCh7XG4gICAgICAgICAgICB0aXRsZTogJ+ivt+i+k+WFpeS4k+eyvuetiee6pycsXG4gICAgICAgICAgICBpY29uOiAnbm9uZScsXG4gICAgICAgICAgICBkdXJhdGlvbjogMTAwMFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNoZWNrVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmKCFjaGVja1ZhbGlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNwZWNTdHJpbmcgPSBzcGVjU3RyaW5nLnN1YnN0cmluZygwLCBzcGVjU3RyaW5nLmxlbmd0aCAtIDEpO1xuXG4gICAgbGV0IGRldGFpbERhdGEgPSB7XG4gICAgICBjaGFyYWN0ZXJJZDogJycsXG4gICAgICBjaGFyYWN0ZXJOYW1lOiBlLmRldGFpbC52YWx1ZS5jaGFyYWN0ZXJOYW1lLFxuICAgICAgY2hhcmFjdGVyQWNjb3VudDogdGhpcy5kYXRhLmFjY291bnRJZCxcbiAgICAgIGNoYXJhY3RlclJlYWxtOiB0aGlzLmRhdGEuc2VydmVyc0xpc3RbMV1bdGhpcy5kYXRhLnNlcnZlckluZGV4WzFdXS5pZCxcbiAgICAgIGNoYXJhY3RlclJlYWxtWm9uZTogdGhpcy5kYXRhLnNlcnZlcnNMaXN0WzBdW3RoaXMuZGF0YS5zZXJ2ZXJJbmRleFswXV0uaWQsXG4gICAgICBjaGFyYWN0ZXJSZWFsbVR5cGU6IHRoaXMuZGF0YS5yZWFsbVR5cGUsXG4gICAgICBjaGFyYWN0ZXJDbGFzczogdGhpcy5kYXRhLmpvYkluZGV4WzFdICsgMSxcbiAgICAgIGFsbGlhbmNlSG9yZGU6IHRoaXMuZGF0YS5qb2JJbmRleFswXSArIDEsXG4gICAgICBjaGFyYWN0ZXJTcGVjaWFsaXphdGlvbjogc3BlY1N0cmluZyxcbiAgICAgIHVzZXJJZDogd3guZ2V0U3RvcmFnZVN5bmMoJ2lkJylcbiAgICB9XG4gICAgaWYodGhpcy5kYXRhLm1vZGUgPT0gJ01vZGlmeScpIHtcbiAgICAgIGRldGFpbERhdGEuY2hhcmFjdGVySWQgPSB0aGlzLmRhdGEuY2hhcmFjdGVySWRcbiAgICB9XG4gICAgXG4gICAgYXBwLnJlcXVlc3RGdW5jKCcvdXNlci9zYXZlQ2hhcmFjdGVyJywgZGV0YWlsRGF0YSwgJ1BPU1QnLCByZXMgPT4ge1xuICAgICAgY29uc29sZS5sb2cocmVzLmRhdGEpO1xuICAgICAgaWYgKHJlcy5kYXRhLnN1Y2Nlc3MgPT0gdHJ1ZSkge1xuICAgICAgICB3eC5zaG93VG9hc3Qoe1xuICAgICAgICAgIHRpdGxlOiByZXMuZGF0YS5tc2csXG4gICAgICAgICAgaWNvbjogJ3N1Y2Nlc3MnLFxuICAgICAgICAgIGR1cmF0aW9uOiAxMDAwXG4gICAgICAgIH0pXG4gICAgICAgIHd4Lm5hdmlnYXRlQmFjayh7XG4gICAgICAgICAgZGVsdGE6IF90aGlzLmRhdGEubW9kZSA9PSAnQWRkTmV3Jz8gMjogMVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3guc2hvd1RvYXN0KHtcbiAgICAgICAgICB0aXRsZTogcmVzLmRhdGEubXNnLFxuICAgICAgICAgIGljb246ICdub25lJyxcbiAgICAgICAgICBkdXJhdGlvbjogMTAwMFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG4gIGpvYnNDaGFuZ2UoZSkge1xuICAgIHRoaXMuZ2V0Q2hhcmFjdGVyU3BlYyhlLmRldGFpbC52YWx1ZVsxXSArIDEpO1xuICB9LFxuICBqb2JzQ29sdW1uQ2hhbmdlKGUpIHtcbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgIGpvYnM6IHRoaXMuZGF0YS5qb2JzLFxuICAgICAgam9iSW5kZXg6IHRoaXMuZGF0YS5qb2JJbmRleFxuICAgIH07XG4gICAgZGF0YS5qb2JJbmRleFtlLmRldGFpbC5jb2x1bW5dID0gZS5kZXRhaWwudmFsdWU7XG4gICAgc3dpdGNoIChlLmRldGFpbC5jb2x1bW4pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgc3dpdGNoIChkYXRhLmpvYkluZGV4WzBdKSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgZGF0YS5qb2JzWzFdID0gWyflnKPpqpHlo6snLCAn5oiY5aOrJywgJ+atu+S6oemqkeWjqycsICfnjI7kuronLCAn6JCo5ruh56Wt5Y+4JywgJ+a9nOihjOiAhScsICflvrfpsoHkvIonLCAn5oG26a2U54yO5omLJywgJ+azleW4iCcsICfniafluIgnLCAn5pyv5aOrJ107XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBkYXRhLmpvYnNbMV0gPSBbJ+Wco+mqkeWjqycsICfmiJjlo6snLCAn5q275Lqh6aqR5aOrJywgJ+eMjuS6uicsICfokKjmu6Hnpa3lj7gnLCAn5r2c6KGM6ICFJywgJ+W+t+mygeS8iicsICfmgbbprZTnjI7miYsnLCAn5rOV5biIJywgJ+eJp+W4iCcsICfmnK/lo6snXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEuam9iSW5kZXhbMV0gPSAwO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICB9XG4gICAgdGhpcy5zZXREYXRhKGRhdGEpO1xuICB9LFxuICBzZXJ2ZXJzQ29sdW1uQ2hhbmdlKGUpIHtcbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgIHNlcnZlckluZGV4OiB0aGlzLmRhdGEuc2VydmVySW5kZXhcbiAgICB9O1xuICAgIGRhdGEuc2VydmVySW5kZXhbZS5kZXRhaWwuY29sdW1uXSA9IGUuZGV0YWlsLnZhbHVlO1xuICAgIHN3aXRjaCAoZS5kZXRhaWwuY29sdW1uKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHRoaXMuZ2V0UmVhbG1MaXN0KHRoaXMuZGF0YS5yZWFsbVR5cGUsIHBhcnNlSW50KHRoaXMuZGF0YS5zZXJ2ZXJzTGlzdFswXVtlLmRldGFpbC52YWx1ZV0uaWQpKTtcbiAgICAgICAgZGF0YS5zZXJ2ZXJJbmRleFsxXSA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLnNldERhdGEoZGF0YSk7XG4gIH0sXG5cbiAgY2hlY2tib3hDaGFuZ2U6IGZ1bmN0aW9uIChlKSB7XG4gICAgbGV0IHRlbXBsaXN0ID0gdGhpcy5kYXRhLnNwZWNpYWxpemF0aW9ucztcbiAgICB0ZW1wbGlzdC5mb3JFYWNoKHIgPT4ge1xuICAgICAgaWYgKGUuZGV0YWlsLnZhbHVlLmluZGV4T2Yoci5uYW1lKSA+PSAwKSB7XG4gICAgICAgIHIuY2hlY2tlZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgc3BlY2lhbGl6YXRpb25zOiB0ZW1wbGlzdFxuICAgIH0pXG4gIH0sXG4gIGlucHV0bGV2ZWw6IGZ1bmN0aW9uIChlKSB7XG4gICAgbGV0IHYgPSBlLmRldGFpbC52YWx1ZTtcbiAgICBsZXQgbiA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0Lm5hbWU7XG4gICAgbGV0IHRlbXBsaXN0ID0gdGhpcy5kYXRhLnNwZWNpYWxpemF0aW9ucztcbiAgICB0ZW1wbGlzdC5mb3JFYWNoKHIgPT4ge1xuICAgICAgaWYgKG4uaW5kZXhPZihyLm5hbWUpID49IDApIHtcbiAgICAgICAgci52YWx1ZSA9IHBhcnNlSW50KHYpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBzcGVjaWFsaXphdGlvbnM6IHRlbXBsaXN0XG4gICAgfSlcbiAgfVxufSlcbiJdfQ==