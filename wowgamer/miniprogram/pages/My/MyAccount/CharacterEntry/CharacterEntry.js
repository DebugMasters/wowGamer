"use strict";
const app = getApp();
Page({
    data: {
        mode: '',
        realmType: 0,
        accountId: '',
        characterId: '',
        disableCheck1: false,
        specializations: new Array(),
        jobs: [
            ['联盟', '部落'],
            ['圣骑士', '战士', '死亡骑士', '猎人', '萨满祭司', '潜行者', '德鲁伊', '恶魔猎手', '法师', '牧师', '术士']
        ],
        jobIndex: [0, 0],
        zones: new Array(),
        serversList: new Array(),
        serverIndex: [0, 0],
    },
    onLoad(option) {
        if (option.mode == 'AddNew') {
            const realmtype = option.realmType ? parseInt(option.realmType.toString()) : 1;
            this.getRealmList(realmtype);
            this.getCharacterSpec(1);
            this.setData({
                mode: option.mode,
                realmType: realmtype,
                accountId: option.accountId
            });
        }
        else if (option.mode == 'Modify') {
            this.setData({
                mode: option.mode,
                characterId: option.characterId,
                accountId: option.accountId
            });
        }
    },
    onShow() {
        const _this = this;
        if (this.data.mode == 'Modify') {
            app.requestFunc('/user/getCharacter', { characterId: this.data.characterId }, 'GET', res => {
                console.log(res.data);
                if (res.data.success == true) {
                    let tempJobIndex = [res.data.data.allianceHorde - 1, res.data.data.characterClass - 1];
                    let tempServerIndex = [0, 0];
                    this.getRealmList(res.data.data.realmType, parseInt(res.data.data.realmZone), () => {
                        this.data.serversList[0].forEach((x, index) => {
                            if (x.id == res.data.data.realmZone) {
                                tempServerIndex[0] = index;
                            }
                        });
                        this.data.serversList[1].forEach((x, index) => {
                            if (x.id == res.data.data.characterRealm) {
                                tempServerIndex[1] = index;
                            }
                        });
                        this.setData({
                            characterName: res.data.data.characterName,
                            realmType: res.data.data.realmType,
                            jobIndex: tempJobIndex,
                            serverIndex: tempServerIndex
                        });
                    });
                    res.data.data.characterSpecialization.split('#').forEach(x => {
                        let temp = x.split(':');
                        let data = {
                            specializations: _this.data.specializations
                        };
                        data.specializations.push({ name: temp[0], value: parseInt(temp[1]) == 0 ? NaN : parseInt(temp[1]), checked: parseInt(temp[1]) > 0 ? true : false });
                        this.setData(data);
                    });
                }
            });
        }
    },
    getCharacterSpec(characterClass) {
        const _this = this;
        app.requestFunc('/system/getCharacterSpec', { characterClass: characterClass }, 'GET', res => {
            console.log('res.data :', res.data);
            if (res.data.success == true) {
                let data = {
                    specializations: new Array(),
                };
                res.data.specList.forEach(x => {
                    data.specializations.push({ name: x, value: NaN, checked: false });
                });
                this.setData(data);
            }
        });
    },
    getRealmList(realmType, realmZone, callback) {
        if (realmType == 1) {
            this.setData({
                zones: [{ id: '0', name: '推荐服务器' }, { id: '1', name: '一区' }, { id: '3', name: '三区' }, { id: '5', name: '五区' }, { id: '10', name: '十区' }]
            });
            realmZone = realmZone ? realmZone : 0;
        }
        if (realmType == 2) {
            this.setData({
                zones: [{ id: '1', name: '一区' }, { id: '5', name: '五区' }]
            });
            realmZone = realmZone ? realmZone : 1;
        }
        const _this = this;
        app.requestFunc('/system/getRealmList', { realmType: realmType, realmZone: realmZone }, 'GET', res => {
            console.log(res.data);
            if (res.data.success == true) {
                let tempServers = new Array();
                res.data.realmList.forEach(x => {
                    tempServers.push({ id: x.realmId.toString(), name: x.realmName });
                });
                let tempserversList = new Array();
                tempserversList.push(_this.data.zones);
                tempserversList.push(tempServers);
                this.setData({
                    serversList: tempserversList
                });
                if (typeof (callback) == "function") {
                    callback();
                }
            }
        });
    },
    formSubmit(e) {
        const _this = this;
        let specString = '';
        let checkValid = true;
        this.data.specializations.every(x => {
            if ((x.checked && !isNaN(x.value) && x.value > 0) || !x.checked) {
                specString += x.name + ':' + (x.checked ? x.value.toString() : '0') + '#';
                return true;
            }
            else {
                if (x.checked && !isNaN(x.value) && x.value <= 0) {
                    wx.showToast({
                        title: '专精等级必须大于0',
                        icon: 'none',
                        duration: 1000
                    });
                    checkValid = false;
                    return false;
                }
                else {
                    wx.showToast({
                        title: '请输入专精等级',
                        icon: 'none',
                        duration: 1000
                    });
                }
                checkValid = false;
                return false;
            }
        });
        if (!checkValid) {
            return;
        }
        specString = specString.substring(0, specString.length - 1);
        let detailData = {
            characterId: '',
            characterName: e.detail.value.characterName,
            characterAccount: this.data.accountId,
            characterRealm: this.data.serversList[1][this.data.serverIndex[1]].id,
            characterRealmZone: this.data.serversList[0][this.data.serverIndex[0]].id,
            characterRealmType: this.data.realmType,
            characterClass: this.data.jobIndex[1] + 1,
            allianceHorde: this.data.jobIndex[0] + 1,
            characterSpecialization: specString,
            userId: wx.getStorageSync('userId')
        };
        if (this.data.mode == 'Modify') {
            detailData.characterId = this.data.characterId;
        }
        app.requestFunc('/user/saveCharacter', detailData, 'POST', res => {
            console.log(res.data);
            if (res.data.success == true) {
                wx.showToast({
                    title: res.data.msg,
                    icon: 'success',
                    duration: 1000
                });
                wx.navigateBack({
                    delta: _this.data.mode == 'AddNew' ? 2 : 1
                });
            }
            else {
                wx.showToast({
                    title: res.data.msg,
                    icon: 'none',
                    duration: 1000
                });
            }
        });
    },
    jobsChange(e) {
        this.getCharacterSpec(e.detail.value[1] + 1);
    },
    jobsColumnChange(e) {
        let data = {
            jobs: this.data.jobs,
            jobIndex: this.data.jobIndex
        };
        data.jobIndex[e.detail.column] = e.detail.value;
        switch (e.detail.column) {
            case 0:
                switch (data.jobIndex[0]) {
                    case 0:
                        data.jobs[1] = ['圣骑士', '战士', '死亡骑士', '猎人', '萨满祭司', '潜行者', '德鲁伊', '恶魔猎手', '法师', '牧师', '术士'];
                        break;
                    case 1:
                        data.jobs[1] = ['圣骑士', '战士', '死亡骑士', '猎人', '萨满祭司', '潜行者', '德鲁伊', '恶魔猎手', '法师', '牧师', '术士'];
                        break;
                }
                data.jobIndex[1] = 0;
                break;
            case 1:
        }
        this.setData(data);
    },
    serversColumnChange(e) {
        let data = {
            serverIndex: this.data.serverIndex
        };
        data.serverIndex[e.detail.column] = e.detail.value;
        switch (e.detail.column) {
            case 0:
                this.getRealmList(this.data.realmType, parseInt(this.data.serversList[0][e.detail.value].id));
                data.serverIndex[1] = 0;
                break;
        }
        this.setData(data);
    },
    checkboxChange: function (e) {
        let templist = this.data.specializations;
        templist.forEach(r => {
            if (e.detail.value.indexOf(r.name) >= 0) {
                r.checked = true;
            }
            else {
                r.checked = false;
            }
        });
        this.setData({
            specializations: templist
        });
    },
    inputlevel: function (e) {
        let v = e.detail.value;
        let n = e.currentTarget.dataset.name;
        let templist = this.data.specializations;
        templist.forEach(r => {
            if (n.indexOf(r.name) >= 0) {
                r.value = parseInt(v);
            }
        });
        this.setData({
            specializations: templist
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhcmFjdGVyRW50cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDaGFyYWN0ZXJFbnRyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxFQUFjLENBQUE7QUFFaEMsSUFBSSxDQUFDO0lBQ0gsSUFBSSxFQUFFO1FBQ0osSUFBSSxFQUFFLEVBQUU7UUFDUixTQUFTLEVBQUUsQ0FBQztRQUNaLFNBQVMsRUFBRSxFQUFFO1FBQ2IsV0FBVyxFQUFFLEVBQUU7UUFDZixhQUFhLEVBQUUsS0FBSztRQUNwQixlQUFlLEVBQUUsSUFBSSxLQUFLLEVBQW9EO1FBQzlFLElBQUksRUFBRTtZQUNKLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztZQUNaLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztTQUM1RTtRQUNELFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsS0FBSyxFQUFDLElBQUksS0FBSyxFQUErQjtRQUM5QyxXQUFXLEVBQUUsSUFBSSxLQUFLLEVBQXdDO1FBQzlELFdBQVcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEI7SUFDRCxNQUFNLENBQUMsTUFBTTtRQUNYLElBQUcsTUFBTSxDQUFDLElBQUksSUFBSSxRQUFRLEVBQUU7WUFDMUIsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9FLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lB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LENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN2QjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNYLGVBQWUsRUFBRSxRQUFRO1NBQzFCLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbmRleC50c1xuLy8g6I635Y+W5bqU55So5a6e5L6LXG5jb25zdCBhcHAgPSBnZXRBcHA8SUFwcE9wdGlvbj4oKVxuXG5QYWdlKHtcbiAgZGF0YToge1xuICAgIG1vZGU6ICcnLFxuICAgIHJlYWxtVHlwZTogMCxcbiAgICBhY2NvdW50SWQgOicnLFxuICAgIGNoYXJhY3RlcklkOiAnJyxcbiAgICBkaXNhYmxlQ2hlY2sxOiBmYWxzZSxcbiAgICBzcGVjaWFsaXphdGlvbnM6IG5ldyBBcnJheTx7bmFtZTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyLCBjaGVja2VkOiBib29sZWFuLH0+KCksXG4gICAgam9iczogW1xuICAgICAgWyfogZTnm58nLCAn6YOo6JC9J10sXG4gICAgICBbJ+Wco+mqkeWjqycsICfmiJjlo6snLCAn5q275Lqh6aqR5aOrJywgJ+eMjuS6uicsICfokKjmu6Hnpa3lj7gnLCAn5r2c6KGM6ICFJywgJ+W+t+mygeS8iicsICfmgbbprZTnjI7miYsnLCAn5rOV5biIJywgJ+eJp+W4iCcsICfmnK/lo6snXVxuICAgIF0sXG4gICAgam9iSW5kZXg6IFswLCAwXSxcbiAgICB6b25lczpuZXcgQXJyYXk8e2lkOiBzdHJpbmcsIG5hbWU6IHN0cmluZyB9PigpLFxuICAgIHNlcnZlcnNMaXN0OiBuZXcgQXJyYXk8QXJyYXk8eyBpZDogc3RyaW5nOyBuYW1lOiBzdHJpbmc7IH0+PigpLFxuICAgIHNlcnZlckluZGV4OiBbMCwgMF0sXG4gIH0sXG4gIG9uTG9hZChvcHRpb24pIHtcbiAgICBpZihvcHRpb24ubW9kZSA9PSAnQWRkTmV3Jykge1xuICAgICAgY29uc3QgcmVhbG10eXBlID0gb3B0aW9uLnJlYWxtVHlwZSA/IHBhcnNlSW50KG9wdGlvbi5yZWFsbVR5cGUudG9TdHJpbmcoKSkgOiAxO1xuICAgICAgdGhpcy5nZXRSZWFsbUxpc3QocmVhbG10eXBlKTtcbiAgICAgIHRoaXMuZ2V0Q2hhcmFjdGVyU3BlYygxKTtcbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIG1vZGUgOiBvcHRpb24ubW9kZSxcbiAgICAgICAgcmVhbG1UeXBlOiByZWFsbXR5cGUsXG4gICAgICAgIGFjY291bnRJZDogb3B0aW9uLmFjY291bnRJZFxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYgKG9wdGlvbi5tb2RlID09ICdNb2RpZnknKSB7XG4gICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICBtb2RlIDogb3B0aW9uLm1vZGUsXG4gICAgICAgIGNoYXJhY3RlcklkOiBvcHRpb24uY2hhcmFjdGVySWQsXG4gICAgICAgIGFjY291bnRJZDogb3B0aW9uLmFjY291bnRJZFxuICAgICAgfSlcbiAgICB9XG4gIH0sXG4gIG9uU2hvdygpIHtcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gICAgaWYodGhpcy5kYXRhLm1vZGUgPT0gJ01vZGlmeScpIHtcbiAgICAgIGFwcC5yZXF1ZXN0RnVuYygnL3VzZXIvZ2V0Q2hhcmFjdGVyJywge2NoYXJhY3RlcklkOiB0aGlzLmRhdGEuY2hhcmFjdGVySWR9LCAnR0VUJywgcmVzID0+IHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzLmRhdGEpO1xuICAgICAgICBpZiAocmVzLmRhdGEuc3VjY2VzcyA9PSB0cnVlKSB7XG4gICAgICAgICAgbGV0IHRlbXBKb2JJbmRleCA9IFtyZXMuZGF0YS5kYXRhLmFsbGlhbmNlSG9yZGUgLSAxLCByZXMuZGF0YS5kYXRhLmNoYXJhY3RlckNsYXNzIC0gMV07XG4gICAgICAgICAgbGV0IHRlbXBTZXJ2ZXJJbmRleCA9IFswLCAwXTtcbiAgICAgICAgICB0aGlzLmdldFJlYWxtTGlzdChyZXMuZGF0YS5kYXRhLnJlYWxtVHlwZSwgcGFyc2VJbnQocmVzLmRhdGEuZGF0YS5yZWFsbVpvbmUpLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuc2VydmVyc0xpc3RbMF0uZm9yRWFjaCgoeCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgaWYoeC5pZCA9PSByZXMuZGF0YS5kYXRhLnJlYWxtWm9uZSkge1xuICAgICAgICAgICAgICAgIHRlbXBTZXJ2ZXJJbmRleFswXSA9IGluZGV4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgdGhpcy5kYXRhLnNlcnZlcnNMaXN0WzFdLmZvckVhY2goKHgsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgIGlmKHguaWQgPT0gcmVzLmRhdGEuZGF0YS5jaGFyYWN0ZXJSZWFsbSkge1xuICAgICAgICAgICAgICAgIHRlbXBTZXJ2ZXJJbmRleFsxXSA9IGluZGV4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgICAgICAgY2hhcmFjdGVyTmFtZTogcmVzLmRhdGEuZGF0YS5jaGFyYWN0ZXJOYW1lLFxuICAgICAgICAgICAgICByZWFsbVR5cGU6IHJlcy5kYXRhLmRhdGEucmVhbG1UeXBlLFxuICAgICAgICAgICAgICBqb2JJbmRleDogdGVtcEpvYkluZGV4LFxuICAgICAgICAgICAgICBzZXJ2ZXJJbmRleDogdGVtcFNlcnZlckluZGV4XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmVzLmRhdGEuZGF0YS5jaGFyYWN0ZXJTcGVjaWFsaXphdGlvbi5zcGxpdCgnIycpLmZvckVhY2goeCA9PiB7XG4gICAgICAgICAgICBsZXQgdGVtcCA9IHguc3BsaXQoJzonKTtcbiAgICAgICAgICAgIGxldCBkYXRhID0ge1xuICAgICAgICAgICAgICBzcGVjaWFsaXphdGlvbnMgOiBfdGhpcy5kYXRhLnNwZWNpYWxpemF0aW9uc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRhdGEuc3BlY2lhbGl6YXRpb25zLnB1c2goe25hbWU6IHRlbXBbMF0sIHZhbHVlOiBwYXJzZUludCh0ZW1wWzFdKSA9PSAwID8gTmFOIDogcGFyc2VJbnQodGVtcFsxXSksIGNoZWNrZWQ6IHBhcnNlSW50KHRlbXBbMV0pID4gMCA/IHRydWU6IGZhbHNlfSk7XG4gICAgICAgICAgICB0aGlzLnNldERhdGEoZGF0YSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9LFxuICBnZXRDaGFyYWN0ZXJTcGVjKGNoYXJhY3RlckNsYXNzOiBudW1iZXIpIHtcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gICAgYXBwLnJlcXVlc3RGdW5jKCcvc3lzdGVtL2dldENoYXJhY3RlclNwZWMnLCB7Y2hhcmFjdGVyQ2xhc3M6IGNoYXJhY3RlckNsYXNzfSwgJ0dFVCcsIHJlcyA9PiB7XG4gICAgICBjb25zb2xlLmxvZygncmVzLmRhdGEgOicsIHJlcy5kYXRhKTtcbiAgICAgIGlmKHJlcy5kYXRhLnN1Y2Nlc3MgPT0gdHJ1ZSkge1xuICAgICAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgICBzcGVjaWFsaXphdGlvbnMgOiBuZXcgQXJyYXk8e25hbWU6IHN0cmluZywgdmFsdWU6IG51bWJlciwgY2hlY2tlZDogYm9vbGVhbn0+KCksXG4gICAgICAgIH07XG4gICAgICAgIHJlcy5kYXRhLnNwZWNMaXN0LmZvckVhY2goeD0+IHtcbiAgICAgICAgICBkYXRhLnNwZWNpYWxpemF0aW9ucy5wdXNoKHtuYW1lOiB4LCB2YWx1ZTogTmFOLCBjaGVja2VkOiBmYWxzZX0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZXREYXRhKGRhdGEpO1xuICAgICAgfVxuICAgIH0pXG4gIH0sXG4gIGdldFJlYWxtTGlzdChyZWFsbVR5cGU6IG51bWJlciwgcmVhbG1ab25lPzogbnVtYmVyLCBjYWxsYmFjaz86IEZ1bmN0aW9uKSB7XG4gICAgaWYocmVhbG1UeXBlID09IDEpIHtcbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIHpvbmVzOiBbe2lkOiAnMCcsIG5hbWU6ICfmjqjojZDmnI3liqHlmagnfSwge2lkOiAnMScsIG5hbWU6ICfkuIDljLonfSwge2lkOiAnMycsIG5hbWU6ICfkuInljLonfSwge2lkOiAnNScsIG5hbWU6ICfkupTljLonfSwge2lkOiAnMTAnLCBuYW1lOiAn5Y2B5Yy6J31dXG4gICAgICB9KSBcbiAgICAgIHJlYWxtWm9uZSA9IHJlYWxtWm9uZSA/IHJlYWxtWm9uZSA6IDA7XG4gICAgfVxuICAgIGlmKHJlYWxtVHlwZSA9PSAyKSB7XG4gICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICB6b25lczogW3tpZDogJzEnLCBuYW1lOiAn5LiA5Yy6J30sIHtpZDogJzUnLCBuYW1lOiAn5LqU5Yy6J31dXG4gICAgICB9KSBcbiAgICAgIHJlYWxtWm9uZSA9IHJlYWxtWm9uZSA/IHJlYWxtWm9uZSA6IDE7XG4gICAgfVxuICAgIGNvbnN0IF90aGlzID0gdGhpcztcbiAgICBhcHAucmVxdWVzdEZ1bmMoJy9zeXN0ZW0vZ2V0UmVhbG1MaXN0Jywge3JlYWxtVHlwZTogcmVhbG1UeXBlLCByZWFsbVpvbmU6IHJlYWxtWm9uZX0sICdHRVQnLCByZXMgPT4ge1xuICAgICAgY29uc29sZS5sb2cocmVzLmRhdGEpO1xuICAgICAgaWYgKHJlcy5kYXRhLnN1Y2Nlc3MgPT0gdHJ1ZSkge1xuICAgICAgICBsZXQgdGVtcFNlcnZlcnMgPSBuZXcgQXJyYXk8e2lkOiBzdHJpbmc7IG5hbWU6IHN0cmluZzsgfT4oKTtcbiAgICAgICAgcmVzLmRhdGEucmVhbG1MaXN0LmZvckVhY2goeCA9PiB7XG4gICAgICAgICAgdGVtcFNlcnZlcnMucHVzaCh7aWQ6IHgucmVhbG1JZC50b1N0cmluZygpLCBuYW1lOiB4LnJlYWxtTmFtZX0pO1xuICAgICAgICB9KTtcblxuICAgICAgbGV0IHRlbXBzZXJ2ZXJzTGlzdCA9IG5ldyBBcnJheTxBcnJheTx7IGlkOiBzdHJpbmc7IG5hbWU6IHN0cmluZzsgfT4+KCk7XG4gICAgICB0ZW1wc2VydmVyc0xpc3QucHVzaChfdGhpcy5kYXRhLnpvbmVzKTtcbiAgICAgIHRlbXBzZXJ2ZXJzTGlzdC5wdXNoKHRlbXBTZXJ2ZXJzKTtcbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIHNlcnZlcnNMaXN0OiB0ZW1wc2VydmVyc0xpc3RcbiAgICAgIH0pXG4gICAgICBpZih0eXBlb2YoY2FsbGJhY2spID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH1cbiAgICB9KVxuICB9LFxuXG4gIGZvcm1TdWJtaXQoZSkge1xuICAgIGNvbnN0IF90aGlzID0gdGhpcztcbiAgICBsZXQgc3BlY1N0cmluZyA9ICcnO1xuICAgIGxldCBjaGVja1ZhbGlkID0gdHJ1ZTtcbiAgICB0aGlzLmRhdGEuc3BlY2lhbGl6YXRpb25zLmV2ZXJ5KHggPT4ge1xuICAgICAgaWYgKCh4LmNoZWNrZWQgJiYgIWlzTmFOKHgudmFsdWUpICYmIHgudmFsdWUgPiAwKSB8fCAheC5jaGVja2VkKSB7XG4gICAgICAgIHNwZWNTdHJpbmcgKz0geC5uYW1lICsgJzonICsgKHguY2hlY2tlZCA/IHgudmFsdWUudG9TdHJpbmcoKSA6ICcwJykgKyAnIydcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoeC5jaGVja2VkICYmICFpc05hTih4LnZhbHVlKSAmJiB4LnZhbHVlIDw9IDApIHtcbiAgICAgICAgICB3eC5zaG93VG9hc3Qoe1xuICAgICAgICAgICAgdGl0bGU6ICfkuJPnsr7nrYnnuqflv4XpobvlpKfkuo4wJyxcbiAgICAgICAgICAgIGljb246ICdub25lJyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAxMDAwXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY2hlY2tWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3eC5zaG93VG9hc3Qoe1xuICAgICAgICAgICAgdGl0bGU6ICfor7fovpPlhaXkuJPnsr7nrYnnuqcnLFxuICAgICAgICAgICAgaWNvbjogJ25vbmUnLFxuICAgICAgICAgICAgZHVyYXRpb246IDEwMDBcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjaGVja1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZighY2hlY2tWYWxpZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzcGVjU3RyaW5nID0gc3BlY1N0cmluZy5zdWJzdHJpbmcoMCwgc3BlY1N0cmluZy5sZW5ndGggLSAxKTtcblxuICAgIGxldCBkZXRhaWxEYXRhID0ge1xuICAgICAgY2hhcmFjdGVySWQ6ICcnLFxuICAgICAgY2hhcmFjdGVyTmFtZTogZS5kZXRhaWwudmFsdWUuY2hhcmFjdGVyTmFtZSxcbiAgICAgIGNoYXJhY3RlckFjY291bnQ6IHRoaXMuZGF0YS5hY2NvdW50SWQsXG4gICAgICBjaGFyYWN0ZXJSZWFsbTogdGhpcy5kYXRhLnNlcnZlcnNMaXN0WzFdW3RoaXMuZGF0YS5zZXJ2ZXJJbmRleFsxXV0uaWQsXG4gICAgICBjaGFyYWN0ZXJSZWFsbVpvbmU6IHRoaXMuZGF0YS5zZXJ2ZXJzTGlzdFswXVt0aGlzLmRhdGEuc2VydmVySW5kZXhbMF1dLmlkLFxuICAgICAgY2hhcmFjdGVyUmVhbG1UeXBlOiB0aGlzLmRhdGEucmVhbG1UeXBlLFxuICAgICAgY2hhcmFjdGVyQ2xhc3M6IHRoaXMuZGF0YS5qb2JJbmRleFsxXSArIDEsXG4gICAgICBhbGxpYW5jZUhvcmRlOiB0aGlzLmRhdGEuam9iSW5kZXhbMF0gKyAxLFxuICAgICAgY2hhcmFjdGVyU3BlY2lhbGl6YXRpb246IHNwZWNTdHJpbmcsXG4gICAgICB1c2VySWQ6IHd4LmdldFN0b3JhZ2VTeW5jKCd1c2VySWQnKVxuICAgIH1cbiAgICBpZih0aGlzLmRhdGEubW9kZSA9PSAnTW9kaWZ5Jykge1xuICAgICAgZGV0YWlsRGF0YS5jaGFyYWN0ZXJJZCA9IHRoaXMuZGF0YS5jaGFyYWN0ZXJJZFxuICAgIH1cbiAgICBcbiAgICBhcHAucmVxdWVzdEZ1bmMoJy91c2VyL3NhdmVDaGFyYWN0ZXInLCBkZXRhaWxEYXRhLCAnUE9TVCcsIHJlcyA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhyZXMuZGF0YSk7XG4gICAgICBpZiAocmVzLmRhdGEuc3VjY2VzcyA9PSB0cnVlKSB7XG4gICAgICAgIHd4LnNob3dUb2FzdCh7XG4gICAgICAgICAgdGl0bGU6IHJlcy5kYXRhLm1zZyxcbiAgICAgICAgICBpY29uOiAnc3VjY2VzcycsXG4gICAgICAgICAgZHVyYXRpb246IDEwMDBcbiAgICAgICAgfSlcbiAgICAgICAgd3gubmF2aWdhdGVCYWNrKHtcbiAgICAgICAgICBkZWx0YTogX3RoaXMuZGF0YS5tb2RlID09ICdBZGROZXcnPyAyOiAxXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3eC5zaG93VG9hc3Qoe1xuICAgICAgICAgIHRpdGxlOiByZXMuZGF0YS5tc2csXG4gICAgICAgICAgaWNvbjogJ25vbmUnLFxuICAgICAgICAgIGR1cmF0aW9uOiAxMDAwXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfSxcbiAgam9ic0NoYW5nZShlKSB7XG4gICAgdGhpcy5nZXRDaGFyYWN0ZXJTcGVjKGUuZGV0YWlsLnZhbHVlWzFdICsgMSk7XG4gIH0sXG4gIGpvYnNDb2x1bW5DaGFuZ2UoZSkge1xuICAgIGxldCBkYXRhID0ge1xuICAgICAgam9iczogdGhpcy5kYXRhLmpvYnMsXG4gICAgICBqb2JJbmRleDogdGhpcy5kYXRhLmpvYkluZGV4XG4gICAgfTtcbiAgICBkYXRhLmpvYkluZGV4W2UuZGV0YWlsLmNvbHVtbl0gPSBlLmRldGFpbC52YWx1ZTtcbiAgICBzd2l0Y2ggKGUuZGV0YWlsLmNvbHVtbikge1xuICAgICAgY2FzZSAwOlxuICAgICAgICBzd2l0Y2ggKGRhdGEuam9iSW5kZXhbMF0pIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBkYXRhLmpvYnNbMV0gPSBbJ+Wco+mqkeWjqycsICfmiJjlo6snLCAn5q275Lqh6aqR5aOrJywgJ+eMjuS6uicsICfokKjmu6Hnpa3lj7gnLCAn5r2c6KGM6ICFJywgJ+W+t+mygeS8iicsICfmgbbprZTnjI7miYsnLCAn5rOV5biIJywgJ+eJp+W4iCcsICfmnK/lo6snXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGRhdGEuam9ic1sxXSA9IFsn5Zyj6aqR5aOrJywgJ+aImOWjqycsICfmrbvkuqHpqpHlo6snLCAn54yO5Lq6JywgJ+iQqOa7oeelreWPuCcsICfmvZzooYzogIUnLCAn5b636bKB5LyKJywgJ+aBtumtlOeMjuaJiycsICfms5XluIgnLCAn54mn5biIJywgJ+acr+WjqyddO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YS5qb2JJbmRleFsxXSA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgIH1cbiAgICB0aGlzLnNldERhdGEoZGF0YSk7XG4gIH0sXG4gIHNlcnZlcnNDb2x1bW5DaGFuZ2UoZSkge1xuICAgIGxldCBkYXRhID0ge1xuICAgICAgc2VydmVySW5kZXg6IHRoaXMuZGF0YS5zZXJ2ZXJJbmRleFxuICAgIH07XG4gICAgZGF0YS5zZXJ2ZXJJbmRleFtlLmRldGFpbC5jb2x1bW5dID0gZS5kZXRhaWwudmFsdWU7XG4gICAgc3dpdGNoIChlLmRldGFpbC5jb2x1bW4pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgdGhpcy5nZXRSZWFsbUxpc3QodGhpcy5kYXRhLnJlYWxtVHlwZSwgcGFyc2VJbnQodGhpcy5kYXRhLnNlcnZlcnNMaXN0WzBdW2UuZGV0YWlsLnZhbHVlXS5pZCkpO1xuICAgICAgICBkYXRhLnNlcnZlckluZGV4WzFdID0gMDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuc2V0RGF0YShkYXRhKTtcbiAgfSxcblxuICBjaGVja2JveENoYW5nZTogZnVuY3Rpb24gKGUpIHtcbiAgICBsZXQgdGVtcGxpc3QgPSB0aGlzLmRhdGEuc3BlY2lhbGl6YXRpb25zO1xuICAgIHRlbXBsaXN0LmZvckVhY2gociA9PiB7XG4gICAgICBpZiAoZS5kZXRhaWwudmFsdWUuaW5kZXhPZihyLm5hbWUpID49IDApIHtcbiAgICAgICAgci5jaGVja2VkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIuY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICBzcGVjaWFsaXphdGlvbnM6IHRlbXBsaXN0XG4gICAgfSlcbiAgfSxcbiAgaW5wdXRsZXZlbDogZnVuY3Rpb24gKGUpIHtcbiAgICBsZXQgdiA9IGUuZGV0YWlsLnZhbHVlO1xuICAgIGxldCBuID0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQubmFtZTtcbiAgICBsZXQgdGVtcGxpc3QgPSB0aGlzLmRhdGEuc3BlY2lhbGl6YXRpb25zO1xuICAgIHRlbXBsaXN0LmZvckVhY2gociA9PiB7XG4gICAgICBpZiAobi5pbmRleE9mKHIubmFtZSkgPj0gMCkge1xuICAgICAgICByLnZhbHVlID0gcGFyc2VJbnQodik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIHNwZWNpYWxpemF0aW9uczogdGVtcGxpc3RcbiAgICB9KVxuICB9XG59KVxuIl19