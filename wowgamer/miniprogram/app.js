"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resources_1 = require("./utils/resources");
App({
    globalData: {
        RootURL: 'https://www.5mlf.cn/',
        URL: 'https://www.5mlf.cn/warcraft/a/api',
        isAuthorized: false,
        isShared: false,
        sharedUserId: '',
        userInfo: { avatarUrl: '', city: '', country: '', gender: 0, language: 'zh_CN', nickName: '', province: '' },
        StatusBar: 0,
        Custom: { bottom: 0, height: 0, left: 0, right: 0, top: 0, width: 0 },
        CustomBar: 0,
        WindowHeight: 0,
        ScreenHeight: 0
    },
    onLaunch: function () {
        const userInfo = wx.getStorageSync('userInfo');
        if (userInfo != '') {
            this.globalData.userInfo = userInfo;
        }
        wx.getSystemInfo({
            success: e => {
                this.globalData.StatusBar = e.statusBarHeight;
                let custom = wx.getMenuButtonBoundingClientRect();
                this.globalData.Custom = custom;
                this.globalData.CustomBar = custom.bottom + custom.top - e.statusBarHeight;
                this.globalData.WindowHeight = e.windowHeight;
                this.globalData.ScreenHeight = e.screenHeight;
            }
        });
    },
    requestFuncPromise: function (api, data, method) {
        var promise = new Promise((resolve, reject) => {
            wx.request({
                url: this.globalData.URL + api,
                data: data,
                header: {
                    "Content-Type": "application/x-www-form-urlencoded"
                },
                method: method,
                success: res => resolve(res),
                fail: err => reject(err)
            });
        });
        return promise;
    },
    requestFunc: function (api, data, method, successfn, failfn) {
        wx.request({
            url: this.globalData.URL + api,
            data: data,
            header: {
                "Content-Type": "application/x-www-form-urlencoded"
            },
            method: method,
            success: successfn,
            fail: failfn
        });
    },
    getResourcePath: function (name, type) {
        return resources_1.getResources(name, type);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaURBQWlEO0FBRWpELEdBQUcsQ0FBYTtJQUNkLFVBQVUsRUFBRTtRQUNWLE9BQU8sRUFBRSxzQkFBc0I7UUFDL0IsR0FBRyxFQUFFLG9DQUFvQztRQUl6QyxZQUFZLEVBQUUsS0FBSztRQUNuQixRQUFRLEVBQUUsS0FBSztRQUNmLFlBQVksRUFBRSxFQUFFO1FBQ2hCLFFBQVEsRUFBRSxFQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUM7UUFDMUcsU0FBUyxFQUFFLENBQUM7UUFDWixNQUFNLEVBQUUsRUFBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBQztRQUNuRSxTQUFTLEVBQUUsQ0FBQztRQUNaLFlBQVksRUFBRSxDQUFDO1FBQ2YsWUFBWSxFQUFFLENBQUM7S0FDaEI7SUFDRCxRQUFRLEVBQUU7UUFFUixNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQy9DLElBQUcsUUFBUSxJQUFJLEVBQUUsRUFBRTtZQUNqQixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUE7U0FDcEM7UUFDRCxFQUFFLENBQUMsYUFBYSxDQUFDO1lBQ2YsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFO2dCQUNYLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxlQUFlLENBQUM7Z0JBQzlDLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQywrQkFBK0IsRUFBRSxDQUFDO2dCQUNsRCxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsZUFBZSxDQUFDO2dCQUMzRSxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDO2dCQUM5QyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDO1lBQ2hELENBQUM7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDO0lBQ0Qsa0JBQWtCLEVBQUUsVUFBVSxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU07UUFDN0MsSUFBSSxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDNUMsRUFBRSxDQUFDLE9BQU8sQ0FBQztnQkFDVCxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUUsR0FBRztnQkFDN0IsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsTUFBTSxFQUFFO29CQUNOLGNBQWMsRUFBRSxtQ0FBbUM7aUJBQ3BEO2dCQUNELE1BQU0sRUFBRSxNQUFNO2dCQUNkLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7Z0JBQzVCLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDekIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUE7UUFDRixPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBQ0QsV0FBVyxFQUFFLFVBQVUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU07UUFDekQsRUFBRSxDQUFDLE9BQU8sQ0FBQztZQUNULEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRSxHQUFHO1lBQzdCLElBQUksRUFBRSxJQUFJO1lBQ1YsTUFBTSxFQUFFO2dCQUNOLGNBQWMsRUFBRSxtQ0FBbUM7YUFDcEQ7WUFDRCxNQUFNLEVBQUUsTUFBTTtZQUNkLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLElBQUksRUFBRSxNQUFNO1NBQ2IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNELGVBQWUsRUFBRSxVQUFVLElBQUksRUFBRSxJQUFJO1FBQ25DLE9BQU8sd0JBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGFwcC50c1xyXG5pbXBvcnQgeyBnZXRSZXNvdXJjZXMgfSBmcm9tIFwiLi91dGlscy9yZXNvdXJjZXNcIjtcclxuXHJcbkFwcDxJQXBwT3B0aW9uPih7XHJcbiAgZ2xvYmFsRGF0YToge1xyXG4gICAgUm9vdFVSTDogJ2h0dHBzOi8vd3d3LjVtbGYuY24vJyxcclxuICAgIFVSTDogJ2h0dHBzOi8vd3d3LjVtbGYuY24vd2FyY3JhZnQvYS9hcGknLFxyXG4gICAgLy8gVVJMOiAnaHR0cDovLzM5LjEwMC4zNy4xMDQ6ODk4MC93YXJjcmFmdC9hL2FwaScsXHJcbiAgICAvLyBVUkw6ICdodHRwOi8vbG9jYWxob3N0Ojg5ODAvd2FyY3JhZnQvYS9hcGknLFxyXG4gICAgLy8gUm9vdFVSTDogJ2h0dHA6Ly8zOS4xMDAuMzcuMTA0Ojg5ODAvJyxcclxuICAgIGlzQXV0aG9yaXplZDogZmFsc2UsXHJcbiAgICBpc1NoYXJlZDogZmFsc2UsXHJcbiAgICBzaGFyZWRVc2VySWQ6ICcnLFxyXG4gICAgdXNlckluZm86IHthdmF0YXJVcmw6ICcnLCBjaXR5OiAnJywgY291bnRyeTogJycsIGdlbmRlcjogMCwgbGFuZ3VhZ2U6ICd6aF9DTicsIG5pY2tOYW1lOiAnJywgcHJvdmluY2U6ICcnfSxcclxuICAgIFN0YXR1c0JhcjogMCxcclxuICAgIEN1c3RvbToge2JvdHRvbTogMCwgaGVpZ2h0OiAwLCBsZWZ0OiAwLCByaWdodDogMCwgdG9wOiAwLCB3aWR0aDogMH0sXHJcbiAgICBDdXN0b21CYXI6IDAsXHJcbiAgICBXaW5kb3dIZWlnaHQ6IDAsXHJcbiAgICBTY3JlZW5IZWlnaHQ6IDBcclxuICB9LFxyXG4gIG9uTGF1bmNoOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyDnmbvlvZVcclxuICAgIGNvbnN0IHVzZXJJbmZvID0gd3guZ2V0U3RvcmFnZVN5bmMoJ3VzZXJJbmZvJyk7XHJcbiAgICBpZih1c2VySW5mbyAhPSAnJykge1xyXG4gICAgICB0aGlzLmdsb2JhbERhdGEudXNlckluZm8gPSB1c2VySW5mb1xyXG4gICAgfVxyXG4gICAgd3guZ2V0U3lzdGVtSW5mbyh7XHJcbiAgICAgIHN1Y2Nlc3M6IGUgPT4ge1xyXG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5TdGF0dXNCYXIgPSBlLnN0YXR1c0JhckhlaWdodDtcclxuICAgICAgICBsZXQgY3VzdG9tID0gd3guZ2V0TWVudUJ1dHRvbkJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5DdXN0b20gPSBjdXN0b207ICBcclxuICAgICAgICB0aGlzLmdsb2JhbERhdGEuQ3VzdG9tQmFyID0gY3VzdG9tLmJvdHRvbSArIGN1c3RvbS50b3AgLSBlLnN0YXR1c0JhckhlaWdodDtcclxuICAgICAgICB0aGlzLmdsb2JhbERhdGEuV2luZG93SGVpZ2h0ID0gZS53aW5kb3dIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhLlNjcmVlbkhlaWdodCA9IGUuc2NyZWVuSGVpZ2h0O1xyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH0sXHJcbiAgcmVxdWVzdEZ1bmNQcm9taXNlOiBmdW5jdGlvbiAoYXBpLCBkYXRhLCBtZXRob2QpIHtcclxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICB3eC5yZXF1ZXN0KHtcclxuICAgICAgICB1cmw6IHRoaXMuZ2xvYmFsRGF0YS5VUkwgK2FwaSxcclxuICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgIGhlYWRlcjoge1xyXG4gICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWV0aG9kOiBtZXRob2QsXHJcbiAgICAgICAgc3VjY2VzczogcmVzID0+IHJlc29sdmUocmVzKSxcclxuICAgICAgICBmYWlsOiBlcnIgPT4gcmVqZWN0KGVycilcclxuICAgICAgfSk7XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIHByb21pc2U7XHJcbiAgfSxcclxuICByZXF1ZXN0RnVuYzogZnVuY3Rpb24gKGFwaSwgZGF0YSwgbWV0aG9kLCBzdWNjZXNzZm4sIGZhaWxmbikge1xyXG4gICAgd3gucmVxdWVzdCh7XHJcbiAgICAgIHVybDogdGhpcy5nbG9iYWxEYXRhLlVSTCArYXBpLFxyXG4gICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICBoZWFkZXI6IHtcclxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiXHJcbiAgICAgIH0sXHJcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxyXG4gICAgICBzdWNjZXNzOiBzdWNjZXNzZm4sXHJcbiAgICAgIGZhaWw6IGZhaWxmblxyXG4gICAgfSk7XHJcbiAgfSxcclxuICBnZXRSZXNvdXJjZVBhdGg6IGZ1bmN0aW9uIChuYW1lLCB0eXBlKSB7XHJcbiAgICByZXR1cm4gZ2V0UmVzb3VyY2VzKG5hbWUsIHR5cGUpO1xyXG4gIH1cclxufSkiXX0=